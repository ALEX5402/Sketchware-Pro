package mod.hilal.saif.blocks;

import com.besome.sketch.editor.LogicEditorActivity;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.HashMap;

import mod.hilal.saif.lib.FileUtil;

public class BlocksHandler {
    public static void builtInBlocks(ArrayList arrayList) {
        HashMap hashMap = new HashMap();
        hashMap.put("name", "CommandBlockJava");
        hashMap.put("type", "c");
        hashMap.put("typeName", "");
        hashMap.put("code", "/*-JX4UA2y_f1OckjjvxWI.bQwRei-sLEsBmds7ArsRfi0xSFEP3Php97kjdMCs5ed\n>[%1$s]\n>%2$s\n>%3$s\n>%4$s\n>%5$s\n%6$s\nBpWI8U4flOpx8Ke66QTlZYBA_NEusQ7BN-D0wvZs7ArsRfi0.EP3Php97kjdMCs*/");
        hashMap.put("color", "#493F5A");
        hashMap.put("palette", "0");
        hashMap.put("spec", "Java Command Block : reference %s distance %d frontend %d backend %d command %m.Command");
        arrayList.add(0, hashMap);
        HashMap hashMap2 = new HashMap();
        hashMap2.put("name", "CommandBlockXML");
        hashMap2.put("type", "c");
        hashMap2.put("typeName", "");
        hashMap2.put("code", "/*AXAVajPNTpbJjsz-NGVTp08YDzfI-04kA7ZsuCl4GHqTQQiuWL45sV6Vf4gwK\n>[%1$s]\n>%2$s\n>%3$s\n>%4$s\n>%5$s\n>%6$s\n%7$s\nUi5_PNTJb21WO6OuGwQ3psk3su1LIvyXo_OAol-kVQBC5jtN_DcPLaRCJ0yXp*/");
        hashMap2.put("color", "#493F5A");
        hashMap2.put("palette", "0");
        hashMap2.put("spec", "XML Command Block : reference %s distance %d frontend %d backend %d command %m.Command xml name %s.inputOnly");
        arrayList.add(0, hashMap2);
        HashMap hashMap3 = new HashMap();
        hashMap3.put("name", "viewOnClick");
        hashMap3.put("type", "c");
        hashMap3.put("typeName", "");
        hashMap3.put("code", "%s.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View _view) {\n%s\n}\n});");
        hashMap3.put("color", "#4A6CD4");
        hashMap3.put("palette", "0");
        hashMap3.put("spec", "When %m.view clicked");
        arrayList.add(0, hashMap3);
        HashMap hashMap4 = new HashMap();
        hashMap4.put("name", "setRecyclerViewLayoutParams");
        hashMap4.put("type", " ");
        hashMap4.put("typeName", "");
        hashMap4.put("code", "RecyclerView.LayoutParams _lp = new RecyclerView.LayoutParams(ViewGroup.LayoutParams.%s, ViewGroup.LayoutParams.%s);\n_view.setLayoutParams(_lp);");
        hashMap4.put("color", "#4A6CD4");
        hashMap4.put("palette", "7");
        hashMap4.put("spec", "set RecyclerViewLayoutParams width %m.LayoutParam height %m.LayoutParam");
        arrayList.add(0, hashMap4);
        HashMap hashMap5 = new HashMap();
        hashMap5.put("name", "refreshingList");
        hashMap5.put("type", " ");
        hashMap5.put("typeName", "");
        hashMap5.put("code", "%s.invalidateViews();");
        hashMap5.put("color", "#4A6CD4");
        hashMap5.put("palette", "0");
        hashMap5.put("spec", "%m.listview invalidate views");
        arrayList.add(0, hashMap5);
        HashMap hashMap6 = new HashMap();
        hashMap6.put("name", "ListViewAddHeader");
        hashMap6.put("type", " ");
        hashMap6.put("typeName", "");
        hashMap6.put("code", "%s.addHeaderView(%s,%s,%s);");
        hashMap6.put("color", "#4A6CD4");
        hashMap6.put("palette", "0");
        hashMap6.put("spec", "%m.listview add Header view %m.view data %s selectable? %b");
        arrayList.add(0, hashMap6);
        HashMap hashMap7 = new HashMap();
        hashMap7.put("name", "ListViewAddFooter");
        hashMap7.put("type", " ");
        hashMap7.put("typeName", "");
        hashMap7.put("code", "%s.addFooterView(%s,%s,%s);");
        hashMap7.put("color", "#4A6CD4");
        hashMap7.put("palette", "0");
        hashMap7.put("spec", "%m.listview add Footer view %m.view data %s selectable? %b");
        arrayList.add(0, hashMap7);
        HashMap hashMap8 = new HashMap();
        hashMap8.put("name", "listViewRemoveHeader");
        hashMap8.put("type", " ");
        hashMap8.put("typeName", "");
        hashMap8.put("code", "%s.removeHeaderView(%s);");
        hashMap8.put("color", "#4A6CD4");
        hashMap8.put("palette", "0");
        hashMap8.put("spec", "%m.listview remove Header %m.view");
        arrayList.add(0, hashMap8);
        HashMap hashMap9 = new HashMap();
        hashMap9.put("name", "listViewRemoveFooter");
        hashMap9.put("type", " ");
        hashMap9.put("typeName", "");
        hashMap9.put("code", "%s.removeFooterView(%s);");
        hashMap9.put("color", "#4A6CD4");
        hashMap9.put("palette", "0");
        hashMap9.put("spec", "%m.listview remove Footer %m.view");
        arrayList.add(0, hashMap9);
        HashMap hashMap10 = new HashMap();
        hashMap10.put("name", "progressdialogCreate");
        hashMap10.put("type", " ");
        hashMap10.put("typeName", "");
        hashMap10.put("code", "%s = new ProgressDialog(%s.this);");
        hashMap10.put("color", "#29A7E4");
        hashMap10.put("palette", "7");
        hashMap10.put("spec", "%m.progressdialog Create %m.activity");
        arrayList.add(0, hashMap10);
        HashMap hashMap11 = new HashMap();
        hashMap11.put("name", "listViewSetSelection");
        hashMap11.put("type", " ");
        hashMap11.put("typeName", "");
        hashMap11.put("code", "%s.setSelection((int)%s);");
        hashMap11.put("color", "#4A6CD4");
        hashMap11.put("palette", "7");
        hashMap11.put("spec", "%m.listview set selection %d");
        arrayList.add(0, hashMap11);
        HashMap hashMap12 = new HashMap();
        hashMap12.put("name", "EditTextdiableSuggestion");
        hashMap12.put("type", " ");
        hashMap12.put("typeName", "");
        hashMap12.put("code", "%s.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);");
        hashMap12.put("color", "#4A6CD4");
        hashMap12.put("palette", "0");
        hashMap12.put("spec", "%m.edittext disable suggestions");
        arrayList.add(0, hashMap12);
        HashMap hashMap13 = new HashMap();
        hashMap13.put("name", "EditTextLines");
        hashMap13.put("type", " ");
        hashMap13.put("typeName", "");
        hashMap13.put("code", "%s.setLines(%s);");
        hashMap13.put("color", "#4A6CD4");
        hashMap13.put("palette", "0");
        hashMap13.put("spec", "%m.edittext set lines %d");
        arrayList.add(0, hashMap13);
        HashMap hashMap14 = new HashMap();
        hashMap14.put("name", "EditTextSingleLine");
        hashMap14.put("type", " ");
        hashMap14.put("typeName", "");
        hashMap14.put("code", "%s.setSingleLine(%2$s);");
        hashMap14.put("color", "#4A6CD4");
        hashMap14.put("palette", "0");
        hashMap14.put("spec", "%m.edittext singleLine? %b");
        arrayList.add(0, hashMap14);
        HashMap hashMap15 = new HashMap();
        hashMap15.put("name", "EditTextShowError");
        hashMap15.put("type", " ");
        hashMap15.put("typeName", "");
        hashMap15.put("code", "((EditText)%s).setError(%s);");
        hashMap15.put("color", "#4A6CD4");
        hashMap15.put("palette", "0");
        hashMap15.put("spec", "%m.edittext show error %s");
        arrayList.add(0, hashMap15);
        HashMap hashMap16 = new HashMap();
        hashMap16.put("name", "EditTextSelectAll");
        hashMap16.put("type", " ");
        hashMap16.put("typeName", "");
        hashMap16.put("code", "((EditText)%s).selectAll();");
        hashMap16.put("color", "#4A6CD4");
        hashMap16.put("palette", "0");
        hashMap16.put("spec", "%m.edittext select all text");
        arrayList.add(0, hashMap16);
        HashMap hashMap17 = new HashMap();
        hashMap17.put("name", "EditTextSetSelection");
        hashMap17.put("type", " ");
        hashMap17.put("typeName", "");
        hashMap17.put("code", "((EditText)%s).setSelection((int)%s, (int)%s);");
        hashMap17.put("color", "#4A6CD4");
        hashMap17.put("palette", "0");
        hashMap17.put("spec", "%m.edittext set selection start %d end %d");
        arrayList.add(0, hashMap17);
        HashMap hashMap18 = new HashMap();
        hashMap18.put("name", "EditTextSetMaxLines");
        hashMap18.put("type", " ");
        hashMap18.put("typeName", "");
        hashMap18.put("code", "((EditText)%s).setMaxLines((int)%s);");
        hashMap18.put("color", "#4A6CD4");
        hashMap18.put("palette", "0");
        hashMap18.put("spec", "%m.edittext set max lines %d");
        arrayList.add(0, hashMap18);
        HashMap hashMap19 = new HashMap();
        hashMap19.put("name", "EdittextGetselectionStart");
        hashMap19.put("type", "d");
        hashMap19.put("typeName", "");
        hashMap19.put("code", "%s.getSelectionStart()");
        hashMap19.put("color", "#4A6CD4");
        hashMap19.put("palette", "0");
        hashMap19.put("spec", "%m.edittext get selection start");
        arrayList.add(0, hashMap19);
        HashMap hashMap20 = new HashMap();
        hashMap20.put("name", "EdittextGetselectionEnd");
        hashMap20.put("type", "d");
        hashMap20.put("typeName", "");
        hashMap20.put("code", "%s.getSelectionEnd()");
        hashMap20.put("color", "#4A6CD4");
        hashMap20.put("palette", "0");
        hashMap20.put("spec", "%m.edittext get selection end");
        arrayList.add(0, hashMap20);
        HashMap hashMap21 = new HashMap();
        hashMap21.put("name", "performClick");
        hashMap21.put("type", " ");
        hashMap21.put("code", "%s.performClick();");
        hashMap21.put("color", "#4A6CD4");
        hashMap21.put("palette", "0");
        hashMap21.put("spec", "%m.view performClick");
        arrayList.add(0, hashMap21);
        HashMap hashMap22 = new HashMap();
        hashMap22.put("name", "AsyncTaskExecute");
        hashMap22.put("type", " ");
        hashMap22.put("typeName", "");
        hashMap22.put("code", "new %s().execute(%s);");
        hashMap22.put("color", "#29A7E4");
        hashMap22.put("palette", "7");
        hashMap22.put("spec", "%m.asynctask Execute message %s");
        arrayList.add(0, hashMap22);
        HashMap hashMap23 = new HashMap();
        hashMap23.put("name", "AsyncTaskPublishProgress");
        hashMap23.put("type", " ");
        hashMap23.put("typeName", "");
        hashMap23.put("code", "publishProgress((int)%s);");
        hashMap23.put("color", "#29A7E4");
        hashMap23.put("palette", "7");
        hashMap23.put("spec", "publishProgress %d");
        arrayList.add(0, hashMap23);
        HashMap hashMap24 = new HashMap();
        hashMap24.put("name", "progressdialogSetCanceledOutside");
        hashMap24.put("type", " ");
        hashMap24.put("typeName", "");
        hashMap24.put("code", "%s.setCanceledOnTouchOutside(%s);");
        hashMap24.put("color", "#29A7E4");
        hashMap24.put("palette", "7");
        hashMap24.put("spec", "%m.progressdialog setCancelableWhenTouchOutside %b");
        arrayList.add(0, hashMap24);
        HashMap hashMap25 = new HashMap();
        hashMap25.put("name", "datePickerDialogShow");
        hashMap25.put("type", " ");
        hashMap25.put("code", "DialogFragment datePicker = new DatePickerFragment();\r\ndatePicker.show(getSupportFragmentManager(), \"datePicker\");");
        hashMap25.put("color", "#2AA4E2");
        hashMap25.put("palette", "-1");
        hashMap25.put("spec", "DatePickerDialog show");
        arrayList.add(0, hashMap25);
        HashMap hashMap26 = new HashMap();
        hashMap26.put("name", "timePickerDialogShow");
        hashMap26.put("type", " ");
        hashMap26.put("code", "%s.show();");
        hashMap26.put("color", "#2AA4E2");
        hashMap26.put("palette", "-1");
        hashMap26.put("spec", "%m.timepickerdialog show");
        arrayList.add(0, hashMap26);
        HashMap hashMap27 = new HashMap();
        hashMap27.put("name", "imageCrop");
        hashMap27.put("type", " ");
        hashMap27.put("code", "SketchwareUtil.CropImage(this, %s, (int) %s);");
        hashMap27.put("color", "#2AA4E2");
        hashMap27.put("palette", "-1");
        hashMap27.put("spec", "CropImageView fromFilePath %s RequestCode %d");
        arrayList.add(0, hashMap27);
        HashMap hashMap28 = new HashMap();
        hashMap28.put("name", "isConnected");
        hashMap28.put("type", " ");
        hashMap28.put("code", "SketchwareUtil.isConnected(getApplicationContext())");
        hashMap28.put("color", "#2AA4E2");
        hashMap28.put("palette", "-1");
        hashMap28.put("spec", "isConnected");
        arrayList.add(0, hashMap28);
        HashMap hashMap29 = new HashMap();
        hashMap29.put("name", "customImport");
        hashMap29.put("type", " ");
        hashMap29.put("code", "import %s;");
        hashMap29.put("color", "#EE7D15");
        hashMap29.put("palette", "-1");
        hashMap29.put("spec", "import %s.inputOnly");
        arrayList.add(0, hashMap29);
        HashMap hashMap30 = new HashMap();
        hashMap30.put("name", "customImport2");
        hashMap30.put("type", " ");
        hashMap30.put("code", "import %s;");
        hashMap30.put("color", "#EE7D15");
        hashMap30.put("palette", "-1");
        hashMap30.put("spec", "import %m.import");
        arrayList.add(0, hashMap30);
        HashMap hashMap31 = new HashMap();
        hashMap31.put("name", "customToast");
        hashMap31.put("type", " ");
        hashMap31.put("code", "SketchwareUtil.CustomToast(getApplicationContext(), %s, %s, %s, %s, %s, SketchwareUtil.%s);");
        hashMap31.put("color", "#8A55D7");
        hashMap31.put("palette", "-1");
        hashMap31.put("spec", "CustomToast %s textColor %m.color textSize %d bgColor %m.color cornerRadius %d gravity %m.gravity_t");
        arrayList.add(0, hashMap31);
        HashMap hashMap32 = new HashMap();
        hashMap32.put("name", "customToastWithIcon");
        hashMap32.put("type", " ");
        hashMap32.put("code", "SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %s, %s, %s, %s, %s, SketchwareUtil.%s, R.drawable.%s);");
        hashMap32.put("color", "#8A55D7");
        hashMap32.put("palette", "-1");
        hashMap32.put("spec", "CustomToastWithIcon %s textColor %m.color textSize %d bgColor %m.color cornerRadius %d gravity %m.gravity_t Icon %m.resource");
        arrayList.add(0, hashMap32);
        HashMap hashMap33 = new HashMap();
        hashMap33.put("name", "videoAdCreate");
        hashMap33.put("type", " ");
        hashMap33.put("code", "MobileAds.initialize(this, %s);");
        hashMap33.put("color", "#2AA4E2");
        hashMap33.put("palette", "-1");
        hashMap33.put("spec", "VideoAd create APP_ID %s");
        arrayList.add(0, hashMap33);
        HashMap hashMap34 = new HashMap();
        hashMap34.put("name", "videoAdLoad");
        hashMap34.put("type", " ");
        hashMap34.put("code", "%s.loadAd(%s, new com.google.android.gms.ads.AdRequest.Builder().build());");
        hashMap34.put("color", "#2AA4E2");
        hashMap34.put("palette", "-1");
        hashMap34.put("spec", "%m.videoad load REWARD_ID %s");
        arrayList.add(0, hashMap34);
        HashMap hashMap35 = new HashMap();
        hashMap35.put("name", "videoAdIsLoaded");
        hashMap35.put("type", "b");
        hashMap35.put("code", "%s.isLoaded()");
        hashMap35.put("color", "#2AA4E2");
        hashMap35.put("palette", "-1");
        hashMap35.put("spec", "%m.videoad isLoaded");
        arrayList.add(0, hashMap35);
        HashMap hashMap36 = new HashMap();
        hashMap36.put("name", "videoAdShow");
        hashMap36.put("type", " ");
        hashMap36.put("code", "%s.show();");
        hashMap36.put("color", "#2AA4E2");
        hashMap36.put("palette", "-1");
        hashMap36.put("spec", "%m.videoad show");
        arrayList.add(0, hashMap36);
        HashMap hashMap37 = new HashMap();
        hashMap37.put("name", "videoAdResume");
        hashMap37.put("type", " ");
        hashMap37.put("code", "%s.resume();");
        hashMap37.put("color", "#2AA4E2");
        hashMap37.put("palette", "-1");
        hashMap37.put("spec", "%m.videoad resume");
        arrayList.add(0, hashMap37);
        HashMap hashMap38 = new HashMap();
        hashMap38.put("name", "videoAdPause");
        hashMap38.put("type", " ");
        hashMap38.put("code", "%s.pause();");
        hashMap38.put("color", "#2AA4E2");
        hashMap38.put("palette", "-1");
        hashMap38.put("spec", "%m.videoad pause");
        arrayList.add(0, hashMap38);
        HashMap hashMap39 = new HashMap();
        hashMap39.put("name", "videoAdDestroy");
        hashMap39.put("type", " ");
        hashMap39.put("code", "%s.destroy();");
        hashMap39.put("color", "#2AA4E2");
        hashMap39.put("palette", "-1");
        hashMap39.put("spec", "%m.videoad destroy");
        arrayList.add(0, hashMap39);
        HashMap hashMap40 = new HashMap();
        hashMap40.put("name", "LightStatusBar");
        hashMap40.put("type", " ");
        hashMap40.put("code", "getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\ngetWindow().setStatusBarColor(0xFFFFFFFF);");
        hashMap40.put("color", "#2AA4E2");
        hashMap40.put("palette", "-1");
        hashMap40.put("spec", "LightStatusBar");
        arrayList.add(0, hashMap40);
        HashMap hashMap41 = new HashMap();
        hashMap41.put("name", "hideKeyboard");
        hashMap41.put("type", " ");
        hashMap41.put("code", "SketchwareUtil.hideKeyboard(getApplicationContext());");
        hashMap41.put("color", "#2AA4E2");
        hashMap41.put("palette", "-1");
        hashMap41.put("spec", "Hide Keyboard");
        arrayList.add(0, hashMap41);
        HashMap hashMap42 = new HashMap();
        hashMap42.put("name", "showKeyboard");
        hashMap42.put("type", " ");
        hashMap42.put("code", "SketchwareUtil.showKeyboard(getApplicationContext());");
        hashMap42.put("color", "#2AA4E2");
        hashMap42.put("palette", "-1");
        hashMap42.put("spec", "Show Keyboard");
        arrayList.add(0, hashMap42);
        HashMap hashMap43 = new HashMap();
        hashMap43.put("name", "progressdialogSetTitle");
        hashMap43.put("type", " ");
        hashMap43.put("code", "%s.setTitle(%s);");
        hashMap43.put("color", "#2AA4E2");
        hashMap43.put("palette", "-1");
        hashMap43.put("spec", "%m.progressdialog setTitle %s");
        arrayList.add(0, hashMap43);
        HashMap hashMap44 = new HashMap();
        hashMap44.put("name", "progressdialogSetMessage");
        hashMap44.put("type", " ");
        hashMap44.put("code", "%s.setMessage(%s);");
        hashMap44.put("color", "#2AA4E2");
        hashMap44.put("palette", "-1");
        hashMap44.put("spec", "%m.progressdialog setMessage %s");
        arrayList.add(0, hashMap44);
        HashMap hashMap45 = new HashMap();
        hashMap45.put("name", "progressdialogSetMax");
        hashMap45.put("type", " ");
        hashMap45.put("code", "%s.setMax((int)%s);");
        hashMap45.put("color", "#2AA4E2");
        hashMap45.put("palette", "-1");
        hashMap45.put("spec", "%m.progressdialog setMax %d");
        arrayList.add(0, hashMap45);
        HashMap hashMap46 = new HashMap();
        hashMap46.put("name", "progressdialogSetProgress");
        hashMap46.put("type", " ");
        hashMap46.put("code", "%s.setProgress((int)%s);");
        hashMap46.put("color", "#2AA4E2");
        hashMap46.put("palette", "-1");
        hashMap46.put("spec", "%m.progressdialog setProgress %d");
        arrayList.add(0, hashMap46);
        HashMap hashMap47 = new HashMap();
        hashMap47.put("name", "progressdialogSetCancelable");
        hashMap47.put("type", " ");
        hashMap47.put("code", "%s.setCancelable(%s);");
        hashMap47.put("color", "#2AA4E2");
        hashMap47.put("palette", "-1");
        hashMap47.put("spec", "%m.progressdialog setCancelable %b");
        arrayList.add(0, hashMap47);
        HashMap hashMap48 = new HashMap();
        hashMap48.put("name", "progressdialogSetCanceled");
        hashMap48.put("type", " ");
        hashMap48.put("code", "%s.setCanceledOnTouchOutside(%s);");
        hashMap48.put("color", "#2AA4E2");
        hashMap48.put("palette", "-1");
        hashMap48.put("spec", "%m.progressdialog setCanceledOnTouchOutside %b");
        arrayList.add(0, hashMap48);
        HashMap hashMap49 = new HashMap();
        hashMap49.put("name", "progressdialogSetStyle");
        hashMap49.put("type", " ");
        hashMap49.put("code", "%s.setProgressStyle(ProgressDialog.%s);");
        hashMap49.put("color", "#2AA4E2");
        hashMap49.put("palette", "-1");
        hashMap49.put("spec", "%m.progressdialog setProgressStyle %m.styleprogress");
        arrayList.add(0, hashMap49);
        HashMap hashMap50 = new HashMap();
        hashMap50.put("name", "progressdialogDismiss");
        hashMap50.put("type", " ");
        hashMap50.put("code", "%s.dismiss();");
        hashMap50.put("color", "#2AA4E2");
        hashMap50.put("palette", "-1");
        hashMap50.put("spec", "%m.progressdialog dismiss");
        arrayList.add(0, hashMap50);
        HashMap hashMap51 = new HashMap();
        hashMap51.put("name", "progressdialogShow");
        hashMap51.put("type", " ");
        hashMap51.put("code", "%s.show();");
        hashMap51.put("color", "#2AA4E2");
        hashMap51.put("palette", "-1");
        hashMap51.put("spec", "%m.progressdialog show");
        arrayList.add(0, hashMap51);
        HashMap hashMap52 = new HashMap();
        hashMap52.put("name", "startService");
        hashMap52.put("type", " ");
        hashMap52.put("code", "startService(new Intent(getApplicationContext(), %s.class));");
        hashMap52.put("color", "#2AA4E2");
        hashMap52.put("palette", "-1");
        hashMap52.put("spec", "startService %m.activity");
        arrayList.add(0, hashMap52);
        HashMap hashMap53 = new HashMap();
        hashMap53.put("name", "stopService");
        hashMap53.put("type", " ");
        hashMap53.put("code", "stopService(new Intent(getApplicationContext(), %s.class));");
        hashMap53.put("color", "#2AA4E2");
        hashMap53.put("palette", "-1");
        hashMap53.put("spec", "stopService %m.activity");
        arrayList.add(0, hashMap53);
        HashMap hashMap54 = new HashMap();
        hashMap54.put("name", "sendBroadcast");
        hashMap54.put("type", " ");
        hashMap54.put("code", "sendBroadcast(%s);");
        hashMap54.put("color", "#2AA4E2");
        hashMap54.put("palette", "-1");
        hashMap54.put("spec", "sendBroadcast %s");
        arrayList.add(0, hashMap54);
        HashMap hashMap55 = new HashMap();
        hashMap55.put("name", "startActivityWithChooser");
        hashMap55.put("type", " ");
        hashMap55.put("code", "startActivity(Intent.createChooser(%s, %s));");
        hashMap55.put("color", "#2AA4E2");
        hashMap55.put("palette", "-1");
        hashMap55.put("spec", "StartActivity %m.intent with Chooser %s");
        arrayList.add(0, hashMap55);
        HashMap hashMap56 = new HashMap();
        hashMap56.put("name", "finishAffinity");
        hashMap56.put("type", "f");
        hashMap56.put("code", "finishAffinity();");
        hashMap56.put("color", "#2AA4E2");
        hashMap56.put("palette", "-1");
        hashMap56.put("spec", "Finish Affinity");
        arrayList.add(0, hashMap56);
        HashMap hashMap57 = new HashMap();
        hashMap57.put("name", "ternaryString");
        hashMap57.put("type", "s");
        hashMap57.put("code", "%s ? %s : %s");
        hashMap57.put("color", "#E1A928");
        hashMap57.put("palette", "-1");
        hashMap57.put("spec", "%b ? %s : %s");
        arrayList.add(0, hashMap57);
        HashMap hashMap58 = new HashMap();
        hashMap58.put("name", "ternaryNumber");
        hashMap58.put("type", "d");
        hashMap58.put("code", "%s ? (int)%s : (int)%s");
        hashMap58.put("color", "#E1A928");
        hashMap58.put("palette", "-1");
        hashMap58.put("spec", "%b ? %d : %d");
        arrayList.add(0, hashMap58);
        HashMap hashMap59 = new HashMap();
        hashMap59.put("name", "forLoopIncrease");
        hashMap59.put("type", "c");
        hashMap59.put("code", "for(%s = %s; %s; %s++) {\r\n%s\r\n}");
        hashMap59.put("color", "#E1A928");
        hashMap59.put("palette", "-1");
        hashMap59.put("spec", "for %m.varInt = %d ; %b ; %m.varInt ++");
        arrayList.add(0, hashMap59);
        HashMap hashMap60 = new HashMap();
        hashMap60.put("name", "notifyDataSetChanged");
        hashMap60.put("type", " ");
        hashMap60.put("code", "notifyDataSetChanged();");
        hashMap60.put("color", "#4A6CD4");
        hashMap60.put("palette", "-1");
        hashMap60.put("spec", "RefreshData");
        arrayList.add(0, hashMap60);
        HashMap hashMap61 = new HashMap();
        hashMap61.put("name", "getLastVisiblePosition");
        hashMap61.put("type", "d");
        hashMap61.put("code", "%s.getLastVisiblePosition()");
        hashMap61.put("color", "#4A6CD4");
        hashMap61.put("palette", "-1");
        hashMap61.put("spec", "%m.listview getLastVisiblePosition");
        arrayList.add(0, hashMap61);
        HashMap hashMap62 = new HashMap();
        hashMap62.put("name", "listscrollparam");
        hashMap62.put("type", "d");
        hashMap62.put("code", "ListView.%s");
        hashMap62.put("color", "#4A6CD4");
        hashMap62.put("palette", "-1");
        hashMap62.put("spec", "%m.listscrollparam");
        arrayList.add(0, hashMap62);
        HashMap hashMap63 = new HashMap();
        hashMap63.put("name", "menuInflater");
        hashMap63.put("type", " ");
        hashMap63.put("code", "getMenuInflater().inflate(R.menu.%s, menu);");
        hashMap63.put("color", "#4A6CD4");
        hashMap63.put("palette", "-1");
        hashMap63.put("spec", "Menu get menu from file %m.menu");
        arrayList.add(0, hashMap63);
        HashMap hashMap64 = new HashMap();
        hashMap64.put("name", "menuAddItem");
        hashMap64.put("type", " ");
        hashMap64.put("code", "menu.add(0, %s, 0, %s);");
        hashMap64.put("color", "#4A6CD4");
        hashMap64.put("palette", "-1");
        hashMap64.put("spec", "Menu add id %d title %s");
        arrayList.add(0, hashMap64);
        HashMap hashMap65 = new HashMap();
        hashMap65.put("name", "menuAddMenuItem");
        hashMap65.put("type", " ");
        hashMap65.put("code", "MenuItem %1$s = menu.add(Menu.NONE, %2$s, Menu.NONE, %3$s);\r\n%1$s.setIcon(R.drawable.%4$s);\r\n%s.setShowAsAction(MenuItem.%5$s);");
        hashMap65.put("color", "#4A6CD4");
        hashMap65.put("palette", "-1");
        hashMap65.put("spec", "%m.menuitem add id %d title %s icon %m.resource showAsAction %m.menuaction");
        arrayList.add(0, hashMap65);
        HashMap hashMap66 = new HashMap();
        hashMap66.put("name", "menuAddSubmenu");
        hashMap66.put("type", "c");
        hashMap66.put("code", "SubMenu %s = menu.addSubMenu(%s);\r\n%s");
        hashMap66.put("color", "#4A6CD4");
        hashMap66.put("palette", "-1");
        hashMap66.put("spec", "Menu add %m.submenu title %s;");
        arrayList.add(0, hashMap66);
        HashMap hashMap67 = new HashMap();
        hashMap67.put("name", "submenuAddItem");
        hashMap67.put("type", " ");
        hashMap67.put("code", "%s.add(0, %s, 0, %s);");
        hashMap67.put("color", "#4A6CD4");
        hashMap67.put("palette", "-1");
        hashMap67.put("spec", "%m.submenu add id %d title %s");
        arrayList.add(0, hashMap67);
        HashMap hashMap68 = new HashMap();
        hashMap68.put("name", "getAssetFile");
        hashMap68.put("type", " ");
        hashMap68.put("code", "java.io.InputStream %s = getAssets().open(%s);");
        hashMap68.put("color", "#A1887F");
        hashMap68.put("palette", "-1");
        hashMap68.put("spec", "%m.inputstream getFileFromAsset path %s");
        arrayList.add(0, hashMap68);
        HashMap hashMap69 = new HashMap();
        hashMap69.put("name", "renameFile");
        hashMap69.put("type", " ");
        hashMap69.put("code", "{\njava.io.File dYx4Y = new java.io.File(%1$s);\njava.io.File e5Cyk = new java.io.File(%2$s);\ndYx4Y.renameTo(e5Cyk);\n}");
        hashMap69.put("color", "#A1887F");
        hashMap69.put("palette", "-1");
        hashMap69.put("spec", "rename file path %s to %s");
        arrayList.add(0, hashMap69);
        HashMap hashMap70 = new HashMap();
        hashMap70.put("name", "copyAssetFile");
        hashMap70.put("type", "s");
        hashMap70.put("code", "SketchwareUtil.copyFromInputStream(%s)");
        hashMap70.put("color", "#A1887F");
        hashMap70.put("palette", "-1");
        hashMap70.put("spec", "%m.inputstream to String");
        arrayList.add(0, hashMap70);
        HashMap hashMap71 = new HashMap();
        hashMap71.put("name", "sortListmap");
        hashMap71.put("type", " ");
        hashMap71.put("code", "SketchwareUtil.sortListMap(%s, %s, %s, %s);");
        hashMap71.put("color", "#CC5B21");
        hashMap71.put("palette", "-1");
        hashMap71.put("spec", "sort %m.listMap key %s isNumber %b isAscending %b");
        arrayList.add(0, hashMap71);
        HashMap hashMap72 = new HashMap();
        hashMap72.put("name", "deleteMapFromListmap");
        hashMap72.put("type", "a");
        hashMap72.put("code", "%2$s.remove(%1$s);");
        hashMap72.put("color", "#CC5B21");
        hashMap72.put("palette", "-1");
        hashMap72.put("spec", "delete %m.varMap of %m.listMap");
        arrayList.add(0, hashMap72);
        HashMap hashMap73 = new HashMap();
        hashMap73.put("name", "html");
        hashMap73.put("type", "s");
        hashMap73.put("typeName", "");
        hashMap73.put("code", "Html.fromHtml(%s)");
        hashMap73.put("color", "#5CB721");
        hashMap73.put("palette", "-1");
        hashMap73.put("spec", "html %s");
        arrayList.add(0, hashMap73);
        HashMap hashMap74 = new HashMap();
        hashMap74.put("name", "reverse");
        hashMap74.put("type", "s");
        hashMap74.put("code", "new StringBuilder(%s).reverse().toString()");
        hashMap74.put("color", "#5CB721");
        hashMap74.put("palette", "-1");
        hashMap74.put("spec", "reverse %s");
        arrayList.add(0, hashMap74);
        HashMap hashMap75 = new HashMap();
        hashMap75.put("name", "toHashCode");
        hashMap75.put("type", "d");
        hashMap75.put("code", "%s.hashCode()");
        hashMap75.put("color", "#5CB721");
        hashMap75.put("palette", "-1");
        hashMap75.put("spec", "toHashCode %s");
        arrayList.add(0, hashMap75);
        HashMap hashMap76 = new HashMap();
        hashMap76.put("name", "stringMatches");
        hashMap76.put("type", "b");
        hashMap76.put("code", "%s.matches(%s)");
        hashMap76.put("color", "#5CB721");
        hashMap76.put("palette", "-1");
        hashMap76.put("spec", "%s matches RegEx %s");
        arrayList.add(0, hashMap76);
        HashMap hashMap77 = new HashMap();
        hashMap77.put("name", "stringReplaceFirst");
        hashMap77.put("type", "s");
        hashMap77.put("code", "%s.replaceFirst(%s, %s)");
        hashMap77.put("color", "#5CB721");
        hashMap77.put("palette", "-1");
        hashMap77.put("spec", "%s replace first regex %s with %s");
        arrayList.add(0, hashMap77);
        HashMap hashMap78 = new HashMap();
        hashMap78.put("name", "stringReplaceAll");
        hashMap78.put("type", "s");
        hashMap78.put("code", "%s.replaceAll(%s, %s)");
        hashMap78.put("color", "#5CB721");
        hashMap78.put("palette", "-1");
        hashMap78.put("spec", "%s replace all regex %s with %s");
        arrayList.add(0, hashMap78);
        HashMap hashMap79 = new HashMap();
        hashMap79.put("name", "stringSplitToList");
        hashMap79.put("type", " ");
        hashMap79.put("code", "%3$s = new ArrayList<String>(Arrays.asList(%1$s.split(%2$s)));");
        hashMap79.put("color", "#5CB721");
        hashMap79.put("palette", "-1");
        hashMap79.put("spec", "split %s RegEx %s into %m.listStr");
        arrayList.add(0, hashMap79);
        HashMap hashMap80 = new HashMap();
        hashMap80.put("name", "mapContainValue");
        hashMap80.put("type", "b");
        hashMap80.put("code", "%s.containsValue(%s)");
        hashMap80.put("color", "#EE7D15");
        hashMap80.put("palette", "-1");
        hashMap80.put("spec", "%m.varMap contain value %s");
        arrayList.add(0, hashMap80);
        HashMap hashMap81 = new HashMap();
        hashMap81.put("name", "getHeight");
        hashMap81.put("type", "d");
        hashMap81.put("typeName", "");
        hashMap81.put("code", "%s.getHeight()");
        hashMap81.put("color", "#4A6CD4");
        hashMap81.put("palette", "-1");
        hashMap81.put("spec", "%m.view getHeight");
        arrayList.add(0, hashMap81);
        HashMap hashMap82 = new HashMap();
        hashMap82.put("name", "getWidth");
        hashMap82.put("type", "d");
        hashMap82.put("typeName", "");
        hashMap82.put("code", "%s.getWidth()");
        hashMap82.put("color", "#4A6CD4");
        hashMap82.put("palette", "-1");
        hashMap82.put("spec", "%m.view getWidth");
        arrayList.add(0, hashMap82);
        HashMap hashMap83 = new HashMap();
        hashMap83.put("name", "removeView");
        hashMap83.put("type", " ");
        hashMap83.put("typeName", "");
        hashMap83.put("code", "%s.removeView(%s);");
        hashMap83.put("color", "#4A6CD4");
        hashMap83.put("palette", "-1");
        hashMap83.put("spec", "%m.view removeView %m.view");
        arrayList.add(0, hashMap83);
        HashMap hashMap84 = new HashMap();
        hashMap84.put("name", "removeViews");
        hashMap84.put("type", " ");
        hashMap84.put("typeName", "");
        hashMap84.put("code", "%s.removeAllViews();");
        hashMap84.put("color", "#4A6CD4");
        hashMap84.put("palette", "-1");
        hashMap84.put("spec", "%m.view removeAllViews");
        arrayList.add(0, hashMap84);
        HashMap hashMap85 = new HashMap();
        hashMap85.put("name", "addView");
        hashMap85.put("type", " ");
        hashMap85.put("typeName", "");
        hashMap85.put("code", "%s.addView(%s);");
        hashMap85.put("color", "#4A6CD4");
        hashMap85.put("palette", "-1");
        hashMap85.put("spec", "%m.view addView %m.view");
        arrayList.add(0, hashMap85);
        HashMap hashMap86 = new HashMap();
        hashMap86.put("name", "addViews");
        hashMap86.put("type", " ");
        hashMap86.put("typeName", "");
        hashMap86.put("code", "%s.addView(%s, %s);");
        hashMap86.put("color", "#4A6CD4");
        hashMap86.put("palette", "-1");
        hashMap86.put("spec", "%m.view addView %m.view index %d");
        arrayList.add(0, hashMap86);
        HashMap hashMap87 = new HashMap();
        hashMap87.put("name", "setGravity");
        hashMap87.put("type", " ");
        hashMap87.put("code", "%s.setGravity(Gravity.%s | Gravity.%s);");
        hashMap87.put("color", "#4A6CD4");
        hashMap87.put("palette", "-1");
        hashMap87.put("spec", "%m.view setGravity %m.gravity_v %m.gravity_h");
        arrayList.add(0, hashMap87);
        HashMap hashMap88 = new HashMap();
        hashMap88.put("name", "setImageIdentifier");
        hashMap88.put("type", " ");
        hashMap88.put("code", "%s.setImageResource(getResources().getIdentifier(%s, \"drawable\", getPackageName()));");
        hashMap88.put("color", "#4A6CD4");
        hashMap88.put("palette", "-1");
        hashMap88.put("spec", "%m.imageview set image by name %s");
        arrayList.add(0, hashMap88);
        HashMap hashMap89 = new HashMap();
        hashMap89.put("name", "setImageCustomRes");
        hashMap89.put("type", " ");
        hashMap89.put("code", "%s.setImageResource(R.drawable.%s);");
        hashMap89.put("color", "#4A6CD4");
        hashMap89.put("palette", "-1");
        hashMap89.put("spec", "%m.imageview setImage %m.image");
        arrayList.add(0, hashMap89);
        HashMap hashMap90 = new HashMap();
        hashMap90.put("name", "getRating");
        hashMap90.put("type", "d");
        hashMap90.put("code", "%s.getRating()");
        hashMap90.put("color", "#4A6CD4");
        hashMap90.put("palette", "-1");
        hashMap90.put("spec", "%m.ratingbar getRating");
        arrayList.add(0, hashMap90);
        HashMap hashMap91 = new HashMap();
        hashMap91.put("name", "setRating");
        hashMap91.put("type", " ");
        hashMap91.put("code", "%s.setRating((float)%s);");
        hashMap91.put("color", "#4A6CD4");
        hashMap91.put("palette", "-1");
        hashMap91.put("spec", "%m.ratingbar setRating%d");
        arrayList.add(0, hashMap91);
        HashMap hashMap92 = new HashMap();
        hashMap92.put("name", "setNumStars");
        hashMap92.put("type", " ");
        hashMap92.put("code", "%s.setNumStars((int)%s);");
        hashMap92.put("color", "#4A6CD4");
        hashMap92.put("palette", "-1");
        hashMap92.put("spec", "%m.ratingbar setNumStars %d");
        arrayList.add(0, hashMap92);
        HashMap hashMap93 = new HashMap();
        hashMap93.put("name", "setStepSize");
        hashMap93.put("type", " ");
        hashMap93.put("code", "%s.setStepSize((float)%s);");
        hashMap93.put("color", "#4A6CD4");
        hashMap93.put("palette", "-1");
        hashMap93.put("spec", "%m.ratingbar setStepSize %d");
        arrayList.add(0, hashMap93);
        HashMap hashMap94 = new HashMap();
        hashMap94.put("name", "timepickerSetIs24Hour");
        hashMap94.put("type", " ");
        hashMap94.put("code", "%s.setIs24HourView(%s);");
        hashMap94.put("color", "#4A6CD4");
        hashMap94.put("palette", "-1");
        hashMap94.put("spec", "%m.timepicker setIs24Hour %b");
        arrayList.add(0, hashMap94);
        HashMap hashMap95 = new HashMap();
        hashMap95.put("name", "timepickerSetCurrentHour");
        hashMap95.put("type", " ");
        hashMap95.put("code", "%s.setCurrentHour((int)%s);");
        hashMap95.put("color", "#4A6CD4");
        hashMap95.put("palette", "-1");
        hashMap95.put("spec", "%m.timepicker setCurrentHour %d");
        arrayList.add(0, hashMap95);
        HashMap hashMap96 = new HashMap();
        hashMap96.put("name", "timepickerSetCurrentMinute");
        hashMap96.put("type", " ");
        hashMap96.put("code", "%s.setCurrentMinute((int)%s);");
        hashMap96.put("color", "#4A6CD4");
        hashMap96.put("palette", "-1");
        hashMap96.put("spec", "%m.timepicker setCurrentMinute%d");
        arrayList.add(0, hashMap96);
        HashMap hashMap97 = new HashMap();
        hashMap97.put("name", "timepickerSetHour");
        hashMap97.put("type", " ");
        hashMap97.put("code", "%s.setHour((int)%s);");
        hashMap97.put("color", "#4A6CD4");
        hashMap97.put("palette", "-1");
        hashMap97.put("spec", "%m.timepicker setHour %d");
        arrayList.add(0, hashMap97);
        HashMap hashMap98 = new HashMap();
        hashMap98.put("name", "timepickerSetMinute");
        hashMap98.put("type", " ");
        hashMap98.put("code", "%s.setMinute((int)%s);");
        hashMap98.put("color", "#4A6CD4");
        hashMap98.put("palette", "-1");
        hashMap98.put("spec", "%m.timepicker setMinute%d");
        arrayList.add(0, hashMap98);
        HashMap hashMap99 = new HashMap();
        hashMap99.put("name", "autoComSetData");
        hashMap99.put("type", " ");
        hashMap99.put("code", "%s.setAdapter(new ArrayAdapter<String>(getBaseContext(), android.R.layout.simple_list_item_1, %s));");
        hashMap99.put("color", "#4A6CD4");
        hashMap99.put("palette", "-1");
        hashMap99.put("spec", "%m.actv setListData %m.listStr");
        arrayList.add(0, hashMap99);
        HashMap hashMap100 = new HashMap();
        hashMap100.put("name", "setThreshold");
        hashMap100.put("type", " ");
        hashMap100.put("code", "%s.setThreshold(%s);");
        hashMap100.put("color", "#4A6CD4");
        hashMap100.put("palette", "-1");
        hashMap100.put("spec", "%m.mactv setThreshold %d");
        arrayList.add(0, hashMap100);
        HashMap hashMap101 = new HashMap();
        hashMap101.put("name", "setTokenizer");
        hashMap101.put("type", " ");
        hashMap101.put("code", "%s.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());");
        hashMap101.put("color", "#4A6CD4");
        hashMap101.put("palette", "-1");
        hashMap101.put("spec", "%m.mactv CommaTokenizer");
        arrayList.add(0, hashMap101);
        HashMap hashMap102 = new HashMap();
        hashMap102.put("name", "multiAutoComSetData");
        hashMap102.put("type", " ");
        hashMap102.put("code", "%s.setAdapter(new ArrayAdapter<String>(getBaseContext(), android.R.layout.simple_list_item_1, %s));");
        hashMap102.put("color", "#4A6CD4");
        hashMap102.put("palette", "-1");
        hashMap102.put("spec", "%m.mactv setListData %m.listStr");
        arrayList.add(0, hashMap102);
        HashMap hashMap103 = new HashMap();
        hashMap103.put("name", "listSetSelector");
        hashMap103.put("type", " ");
        hashMap103.put("code", "%s.setSelector(%s);");
        hashMap103.put("color", "#4A6CD4");
        hashMap103.put("palette", "-1");
        hashMap103.put("spec", "%m.listview setSelector %m.color");
        arrayList.add(0, hashMap103);
        HashMap hashMap104 = new HashMap();
        hashMap104.put("name", "gridSetCustomViewData");
        hashMap104.put("type", " ");
        hashMap104.put("code", "");
        hashMap104.put("color", "#4A6CD4");
        hashMap104.put("palette", "-1");
        hashMap104.put("spec", "%m.gridview setGridCustomViewData %m.listMap");
        arrayList.add(0, hashMap104);
        HashMap hashMap105 = new HashMap();
        hashMap105.put("name", "gridSetNumColumns");
        hashMap105.put("type", " ");
        hashMap105.put("code", "%s.setNumColumns((int)%s);");
        hashMap105.put("color", "#4A6CD4");
        hashMap105.put("palette", "-1");
        hashMap105.put("spec", "%m.gridview setNumColumns %d");
        arrayList.add(0, hashMap105);
        HashMap hashMap106 = new HashMap();
        hashMap106.put("name", "gridSetColumnWidth");
        hashMap106.put("type", " ");
        hashMap106.put("code", "%s.setColumnWidth((int)%s);");
        hashMap106.put("color", "#4A6CD4");
        hashMap106.put("palette", "-1");
        hashMap106.put("spec", "%m.gridview setColumnWidth %d");
        arrayList.add(0, hashMap106);
        HashMap hashMap107 = new HashMap();
        hashMap107.put("name", "gridSetVerticalSpacing");
        hashMap107.put("type", " ");
        hashMap107.put("code", "%s.setVerticalSpacing((int)%s);");
        hashMap107.put("color", "#4A6CD4");
        hashMap107.put("palette", "-1");
        hashMap107.put("spec", "%m.gridview setVerticalSpacing %d");
        arrayList.add(0, hashMap107);
        HashMap hashMap108 = new HashMap();
        hashMap108.put("name", "gridSetHorizontalSpacing");
        hashMap108.put("type", " ");
        hashMap108.put("code", "%s.setHorizontalSpacing((int)%s);");
        hashMap108.put("color", "#4A6CD4");
        hashMap108.put("palette", "-1");
        hashMap108.put("spec", "%m.gridview setHorizontalSpacing %d");
        arrayList.add(0, hashMap108);
        HashMap hashMap109 = new HashMap();
        hashMap109.put("name", "gridSetStretchMode");
        hashMap109.put("type", " ");
        hashMap109.put("code", "%s.setStretchMode(GridView.%s);");
        hashMap109.put("color", "#4A6CD4");
        hashMap109.put("palette", "-1");
        hashMap109.put("spec", "%m.gridview setStretchMode %m.gridstretchmode");
        arrayList.add(0, hashMap109);
        HashMap hashMap110 = new HashMap();
        hashMap110.put("name", "videoviewSetVideoUri");
        hashMap110.put("type", " ");
        hashMap110.put("code", "%s.setVideoURI(Uri.parse(%s));");
        hashMap110.put("color", "#4A6CD4");
        hashMap110.put("palette", "-1");
        hashMap110.put("spec", "%m.videoview setVideoUri %s");
        arrayList.add(0, hashMap110);
        HashMap hashMap111 = new HashMap();
        hashMap111.put("name", "videoviewStart");
        hashMap111.put("type", " ");
        hashMap111.put("code", "%s.start();");
        hashMap111.put("color", "#4A6CD4");
        hashMap111.put("palette", "-1");
        hashMap111.put("spec", "%m.videoview start");
        arrayList.add(0, hashMap111);
        HashMap hashMap112 = new HashMap();
        hashMap112.put("name", "videoviewPause");
        hashMap112.put("type", " ");
        hashMap112.put("code", "%s.pause();");
        hashMap112.put("color", "#4A6CD4");
        hashMap112.put("palette", "-1");
        hashMap112.put("spec", "%m.videoview pause");
        arrayList.add(0, hashMap112);
        HashMap hashMap113 = new HashMap();
        hashMap113.put("name", "videoviewStop");
        hashMap113.put("type", " ");
        hashMap113.put("code", "%s.stopPlayback();");
        hashMap113.put("color", "#4A6CD4");
        hashMap113.put("palette", "-1");
        hashMap113.put("spec", "%m.videoview stopPlayback");
        arrayList.add(0, hashMap113);
        HashMap hashMap114 = new HashMap();
        hashMap114.put("name", "videoviewIsPlaying");
        hashMap114.put("type", "b");
        hashMap114.put("code", "%s.isPlaying()");
        hashMap114.put("color", "#4A6CD4");
        hashMap114.put("palette", "-1");
        hashMap114.put("spec", "%m.videoview isPlaying");
        arrayList.add(0, hashMap114);
        HashMap hashMap115 = new HashMap();
        hashMap115.put("name", "videoviewCanPause");
        hashMap115.put("type", "b");
        hashMap115.put("code", "%s.canPause()");
        hashMap115.put("color", "#4A6CD4");
        hashMap115.put("palette", "-1");
        hashMap115.put("spec", "%m.videoview canPause");
        arrayList.add(0, hashMap115);
        HashMap hashMap116 = new HashMap();
        hashMap116.put("name", "videoviewCanSeekForward");
        hashMap116.put("type", "b");
        hashMap116.put("code", "%s.canSeekForward()");
        hashMap116.put("color", "#4A6CD4");
        hashMap116.put("palette", "-1");
        hashMap116.put("spec", "%m.videoview canSeekForward");
        arrayList.add(0, hashMap116);
        HashMap hashMap117 = new HashMap();
        hashMap117.put("name", "videoviewCanSeekBackward");
        hashMap117.put("type", "b");
        hashMap117.put("code", "%s.canSeekBackward()");
        hashMap117.put("color", "#4A6CD4");
        hashMap117.put("palette", "-1");
        hashMap117.put("spec", "%m.videoview canSeekBackward");
        arrayList.add(0, hashMap117);
        HashMap hashMap118 = new HashMap();
        hashMap118.put("name", "videoviewGetDuration");
        hashMap118.put("type", "d");
        hashMap118.put("code", "%s.getDuration()");
        hashMap118.put("color", "#4A6CD4");
        hashMap118.put("palette", "-1");
        hashMap118.put("spec", "%m.videoview getDuration");
        arrayList.add(0, hashMap118);
        HashMap hashMap119 = new HashMap();
        hashMap119.put("name", "videoviewGetCurrentPosition");
        hashMap119.put("type", "d");
        hashMap119.put("code", "%s.getCurrentPosition()");
        hashMap119.put("color", "#4A6CD4");
        hashMap119.put("palette", "-1");
        hashMap119.put("spec", "%m.videoview getCurrentPosition");
        arrayList.add(0, hashMap119);
        HashMap hashMap120 = new HashMap();
        hashMap120.put("name", "listSetTranscriptMode");
        hashMap120.put("type", " ");
        hashMap120.put("typeName", "");
        hashMap120.put("code", "%s.setTranscriptMode(ListView.%s);");
        hashMap120.put("color", "#4A6CD4");
        hashMap120.put("palette", "-1");
        hashMap120.put("spec", "%m.listview setTranscriptMode %m.transcriptmode");
        arrayList.add(0, hashMap120);
        HashMap hashMap121 = new HashMap();
        hashMap121.put("name", "listSetStackFromBottom");
        hashMap121.put("type", " ");
        hashMap121.put("typeName", "");
        hashMap121.put("code", "%s.setStackFromBottom(%s);");
        hashMap121.put("color", "#4A6CD4");
        hashMap121.put("palette", "-1");
        hashMap121.put("spec", "%m.listview setStackFromBottom %b");
        arrayList.add(0, hashMap121);
        HashMap hashMap122 = new HashMap();
        hashMap122.put("name", "setElevation");
        hashMap122.put("type", " ");
        hashMap122.put("code", "%s.setElevation((float)%s);");
        hashMap122.put("color", "#4A6CD4");
        hashMap122.put("palette", "-1");
        hashMap122.put("spec", "%m.view setElevation %d");
        arrayList.add(0, hashMap122);
        HashMap hashMap123 = new HashMap();
        hashMap123.put("name", "setTextSize");
        hashMap123.put("type", " ");
        hashMap123.put("code", "%s.setTextSize((int)%s);");
        hashMap123.put("color", "#4A6CD4");
        hashMap123.put("palette", "-1");
        hashMap123.put("spec", "%m.textview setTextSize %d");
        arrayList.add(0, hashMap123);
        HashMap hashMap124 = new HashMap();
        hashMap124.put("name", "setColorFilterView");
        hashMap124.put("type", " ");
        hashMap124.put("code", "%s.getBackground().setColorFilter(%s, PorterDuff.Mode.%s);");
        hashMap124.put("color", "#4A6CD4");
        hashMap124.put("palette", "-1");
        hashMap124.put("spec", "%m.view setColorFilter %m.color with %m.porterduff");
        arrayList.add(0, hashMap124);
        HashMap hashMap125 = new HashMap();
        hashMap125.put("name", "setCornerRadiusView");
        hashMap125.put("type", " ");
        hashMap125.put("code", "%s.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b) { this.setCornerRadius(a); this.setColor(b); return this; } }.getIns((int)%s, %s));");
        hashMap125.put("color", "#4A6CD4");
        hashMap125.put("palette", "-1");
        hashMap125.put("spec", "%m.view setCornerRadius %d color %m.color");
        arrayList.add(0, hashMap125);
        HashMap hashMap126 = new HashMap();
        hashMap126.put("name", "setGradientBackground");
        hashMap126.put("type", " ");
        hashMap126.put("code", "%s.setBackground(new GradientDrawable(GradientDrawable.Orientation.BR_TL,new int[] {%s,%s}));");
        hashMap126.put("color", "#4A6CD4");
        hashMap126.put("palette", "-1");
        hashMap126.put("spec", "%m.view setGradientBackground %m.color and %m.color");
        arrayList.add(0, hashMap126);
        HashMap hashMap127 = new HashMap();
        hashMap127.put("name", "setStrokeView");
        hashMap127.put("type", " ");
        hashMap127.put("code", "%s.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b, int c) { this.setStroke(a, b); this.setColor(c); return this; } }.getIns((int)%s, %s, %s));");
        hashMap127.put("color", "#4A6CD4");
        hashMap127.put("palette", "-1");
        hashMap127.put("spec", "%m.view setStroke %d strokeColor %m.color bgColor %m.color");
        arrayList.add(0, hashMap127);
        HashMap hashMap128 = new HashMap();
        hashMap128.put("name", "setRadiusAndStrokeView");
        hashMap128.put("type", " ");
        hashMap128.put("code", "%s.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b, int c, int d) { this.setCornerRadius(a); this.setStroke(b, c); this.setColor(d); return this; } }.getIns((int)%s, (int)%s, %s, %s));");
        hashMap128.put("color", "#4A6CD4");
        hashMap128.put("palette", "-1");
        hashMap128.put("spec", "%m.view setCornerRadius %d stroke %d strokeColor %m.color bgColor %m.color");
        arrayList.add(0, hashMap128);
        HashMap hashMap129 = new HashMap();
        hashMap129.put("name", "showSnackbar");
        hashMap129.put("type", "c");
        hashMap129.put("code", "com.google.android.material.snackbar.Snackbar.make(%s, %s, com.google.android.material.snackbar.Snackbar.LENGTH_SHORT).setAction(%s, new View.OnClickListener(){\r\n@Override\r\npublic void onClick(View _view) {\r\n%s\r\n}\r\n}).show();");
        hashMap129.put("color", "#4A6CD4");
        hashMap129.put("palette", "-1");
        hashMap129.put("spec", "%m.view showSnackbar text %s actionText %s onClick");
        arrayList.add(0, hashMap129);
        HashMap hashMap130 = new HashMap();
        hashMap130.put("name", "addTab");
        hashMap130.put("type", " ");
        hashMap130.put("code", "%1$s.addTab(%1$s.newTab().setText(%2$s));");
        hashMap130.put("color", "#4A6CD4");
        hashMap130.put("palette", "-1");
        hashMap130.put("spec", "%m.tablayout addTabTitle %s");
        arrayList.add(0, hashMap130);
        HashMap hashMap131 = new HashMap();
        hashMap131.put("name", "setupWithViewPager");
        hashMap131.put("type", " ");
        hashMap131.put("code", "%s.setupWithViewPager(%s);");
        hashMap131.put("color", "#4A6CD4");
        hashMap131.put("palette", "-1");
        hashMap131.put("spec", "%m.tablayout setupWithViewPager %m.viewpager");
        arrayList.add(0, hashMap131);
        HashMap hashMap132 = new HashMap();
        hashMap132.put("name", "setInlineLabel");
        hashMap132.put("type", " ");
        hashMap132.put("code", "%s.setInlineLabel(%s);");
        hashMap132.put("color", "#4A6CD4");
        hashMap132.put("palette", "-1");
        hashMap132.put("spec", "%m.tablayout setInlineLabel %b");
        arrayList.add(0, hashMap132);
        HashMap hashMap133 = new HashMap();
        hashMap133.put("name", "setTabTextColors");
        hashMap133.put("type", " ");
        hashMap133.put("code", "%s.setTabTextColors(%s, %s);");
        hashMap133.put("color", "#4A6CD4");
        hashMap133.put("palette", "-1");
        hashMap133.put("spec", "%m.tablayout setTabTextColors Normal %m.color Selected %m.color");
        arrayList.add(0, hashMap133);
        HashMap hashMap134 = new HashMap();
        hashMap134.put("name", "setTabRippleColor");
        hashMap134.put("type", " ");
        hashMap134.put("code", "%s.setTabRippleColor(new android.content.res.ColorStateList(new int[][]{new int[]{android.R.attr.state_pressed}}, \r\n\r\nnew int[] {%s}));");
        hashMap134.put("color", "#4A6CD4");
        hashMap134.put("palette", "-1");
        hashMap134.put("spec", "%m.tablayout setTabRippleColor %m.color");
        arrayList.add(0, hashMap134);
        HashMap hashMap135 = new HashMap();
        hashMap135.put("name", "setSelectedTabIndicatorColor");
        hashMap135.put("type", " ");
        hashMap135.put("code", "%s.setSelectedTabIndicatorColor(%s);");
        hashMap135.put("color", "#4A6CD4");
        hashMap135.put("palette", "-1");
        hashMap135.put("spec", "%m.tablayout setSelectedTabIndicatorColor %m.color");
        arrayList.add(0, hashMap135);
        HashMap hashMap136 = new HashMap();
        hashMap136.put("name", "setSelectedTabIndicatorHeight");
        hashMap136.put("type", " ");
        hashMap136.put("code", "%s.setSelectedTabIndicatorHeight(%s);");
        hashMap136.put("color", "#4A6CD4");
        hashMap136.put("palette", "-1");
        hashMap136.put("spec", "%m.tablayout setSelectedTabIndicatorHeight %d");
        arrayList.add(0, hashMap136);
        HashMap hashMap137 = new HashMap();
        hashMap137.put("name", "returnTitle");
        hashMap137.put("type", "f");
        hashMap137.put("code", "return %s;");
        hashMap137.put("color", "#4A6CD4");
        hashMap137.put("palette", "-1");
        hashMap137.put("spec", "return Title %s");
        arrayList.add(0, hashMap137);
        HashMap hashMap138 = new HashMap();
        hashMap138.put("name", "returnFragment");
        hashMap138.put("type", "f");
        hashMap138.put("code", "return new %s();");
        hashMap138.put("color", "#4A6CD4");
        hashMap138.put("palette", "-1");
        hashMap138.put("spec", "return Fragment %m.activity");
        arrayList.add(0, hashMap138);
        HashMap hashMap139 = new HashMap();
        hashMap139.put("name", "bottomMenuAddItem");
        hashMap139.put("type", " ");
        hashMap139.put("code", "%s.getMenu().add(0, %s, 0, %s).setIcon(R.drawable.%s);");
        hashMap139.put("color", "#4A6CD4");
        hashMap139.put("palette", "-1");
        hashMap139.put("spec", "%m.bottomnavigation add item id %d title %s icon %m.resource");
        arrayList.add(0, hashMap139);
        HashMap hashMap140 = new HashMap();
        hashMap140.put("name", "codeviewSetCode");
        hashMap140.put("type", " ");
        hashMap140.put("code", "%s.setCode(%s);");
        hashMap140.put("color", "#4A6CD4");
        hashMap140.put("palette", "-1");
        hashMap140.put("spec", "%m.codeview setCode %s");
        arrayList.add(0, hashMap140);
        HashMap hashMap141 = new HashMap();
        hashMap141.put("name", "codeviewSetTheme");
        hashMap141.put("type", " ");
        hashMap141.put("code", "%s.setTheme(Theme.%s);");
        hashMap141.put("color", "#4A6CD4");
        hashMap141.put("palette", "-1");
        hashMap141.put("spec", "%m.codeview setTheme %m.cv_theme");
        arrayList.add(0, hashMap141);
        HashMap hashMap142 = new HashMap();
        hashMap142.put("name", "codeviewSetLanguage");
        hashMap142.put("type", " ");
        hashMap142.put("code", "%s.setLanguage(Language.%s);");
        hashMap142.put("color", "#4A6CD4");
        hashMap142.put("palette", "-1");
        hashMap142.put("spec", "%m.codeview setLanguage %m.cv_language");
        arrayList.add(0, hashMap142);
        HashMap hashMap143 = new HashMap();
        hashMap143.put("name", "codeviewApply");
        hashMap143.put("type", " ");
        hashMap143.put("code", "%s.apply();");
        hashMap143.put("color", "#4A6CD4");
        hashMap143.put("palette", "-1");
        hashMap143.put("spec", "%m.codeview apply");
        arrayList.add(0, hashMap143);
        HashMap hashMap144 = new HashMap();
        hashMap144.put("name", "fabIcon");
        hashMap144.put("type", " ");
        hashMap144.put("code", "_fab.setImageResource(R.drawable.%s);");
        hashMap144.put("color", "#4A6CD4");
        hashMap144.put("palette", "-1");
        hashMap144.put("spec", "Fab setIcon %m.resource");
        arrayList.add(0, hashMap144);
        HashMap hashMap145 = new HashMap();
        hashMap145.put("name", "fabSize");
        hashMap145.put("type", " ");
        hashMap145.put("code", "_fab.setSize(FloatingActionButton.SIZE_%s);");
        hashMap145.put("color", "#4A6CD4");
        hashMap145.put("palette", "-1");
        hashMap145.put("spec", "Fab setSize %m.fabsize");
        arrayList.add(0, hashMap145);
        HashMap hashMap146 = new HashMap();
        hashMap146.put("name", "fabVisibility");
        hashMap146.put("type", " ");
        hashMap146.put("code", "_fab.%s();");
        hashMap146.put("color", "#4A6CD4");
        hashMap146.put("palette", "-1");
        hashMap146.put("spec", "Fab setVisibility %m.fabvisible");
        arrayList.add(0, hashMap146);
        HashMap hashMap147 = new HashMap();
        hashMap147.put("name", "setBgDrawable");
        hashMap147.put("type", " ");
        hashMap147.put("code", "%s.setBackgroundDrawable(getResources().getDrawable(R.drawable.%s));");
        hashMap147.put("color", "#4A6CD4");
        hashMap147.put("palette", "-1");
        hashMap147.put("spec", "%m.view setBackgroundDrawable %m.drawable");
        arrayList.add(0, hashMap147);
        HashMap hashMap148 = new HashMap();
        hashMap148.put("name", "setCardBackgroundColor");
        hashMap148.put("type", " ");
        hashMap148.put("code", "%s.setCardBackgroundColor(%s);");
        hashMap148.put("color", "#4A6CD4");
        hashMap148.put("palette", "-1");
        hashMap148.put("spec", "%m.cardview setCardBackgroundColor %m.color");
        arrayList.add(0, hashMap148);
        HashMap hashMap149 = new HashMap();
        hashMap149.put("name", "setCardRadius");
        hashMap149.put("type", " ");
        hashMap149.put("code", "%s.setRadius((float)%s);");
        hashMap149.put("color", "#4A6CD4");
        hashMap149.put("palette", "-1");
        hashMap149.put("spec", "%m.cardview setCornerRadius %d");
        arrayList.add(0, hashMap149);
        HashMap hashMap150 = new HashMap();
        hashMap150.put("name", "setCardElevation");
        hashMap150.put("type", " ");
        hashMap150.put("code", "%s.setCardElevation((float)%s);");
        hashMap150.put("color", "#4A6CD4");
        hashMap150.put("palette", "-1");
        hashMap150.put("spec", "%m.cardview setCardElevation %d");
        arrayList.add(0, hashMap150);
        HashMap hashMap151 = new HashMap();
        hashMap151.put("name", "setPreventCornerOverlap");
        hashMap151.put("type", " ");
        hashMap151.put("code", "%s.setPreventCornerOverlap(%s);");
        hashMap151.put("color", "#4A6CD4");
        hashMap151.put("palette", "-1");
        hashMap151.put("spec", "%m.cardview setPreventCornerOverlap %b");
        arrayList.add(0, hashMap151);
        HashMap hashMap152 = new HashMap();
        hashMap152.put("name", "setUseCompatPadding");
        hashMap152.put("type", " ");
        hashMap152.put("code", "%s.setUseCompatPadding(%s);");
        hashMap152.put("color", "#4A6CD4");
        hashMap152.put("palette", "-1");
        hashMap152.put("spec", "%m.cardview setUseCompatPadding %b");
        arrayList.add(0, hashMap152);
        HashMap hashMap153 = new HashMap();
        hashMap153.put("name", "spnSetCustomViewData");
        hashMap153.put("type", " ");
        hashMap153.put("code", "");
        hashMap153.put("color", "#4A6CD4");
        hashMap153.put("palette", "-1");
        hashMap153.put("spec", "%m.spinner setSpinnerCustomViewData %m.listMap");
        arrayList.add(0, hashMap153);
        HashMap hashMap154 = new HashMap();
        hashMap154.put("name", "lottieSetAnimationFromAsset");
        hashMap154.put("type", " ");
        hashMap154.put("code", "%s.setAnimation(%s);");
        hashMap154.put("color", "#4A6CD4");
        hashMap154.put("palette", "-1");
        hashMap154.put("spec", "%m.lottie settAnimationFromAsset %s");
        arrayList.add(0, hashMap154);
        HashMap hashMap155 = new HashMap();
        hashMap155.put("name", "lottieSetAnimationFromJson");
        hashMap155.put("type", " ");
        hashMap155.put("code", "%s.setAnimationFromJson(%s);");
        hashMap155.put("color", "#4A6CD4");
        hashMap155.put("palette", "-1");
        hashMap155.put("spec", "%m.lottie setAnimationFromJson %s");
        arrayList.add(0, hashMap155);
        HashMap hashMap156 = new HashMap();
        hashMap156.put("name", "lottieSetAnimationFromUrl");
        hashMap156.put("type", " ");
        hashMap156.put("code", "%s.setAnimationFromUrl(%s);");
        hashMap156.put("color", "#4A6CD4");
        hashMap156.put("palette", "-1");
        hashMap156.put("spec", "%m.lottie setAnimationFromUrl %s");
        arrayList.add(0, hashMap156);
        HashMap hashMap157 = new HashMap();
        hashMap157.put("name", "lottieSetRepeatCount");
        hashMap157.put("type", " ");
        hashMap157.put("code", "%s.setRepeatCount((int)%s);");
        hashMap157.put("color", "#4A6CD4");
        hashMap157.put("palette", "-1");
        hashMap157.put("spec", "%m.lottie setRepeatCount %d");
        arrayList.add(0, hashMap157);
        HashMap hashMap158 = new HashMap();
        hashMap158.put("name", "lottieSetSpeed");
        hashMap158.put("type", " ");
        hashMap158.put("code", "%s.setSpeed((float)%s);");
        hashMap158.put("color", "#4A6CD4");
        hashMap158.put("palette", "-1");
        hashMap158.put("spec", "%m.lottie setSpeed %d");
        arrayList.add(0, hashMap158);
        HashMap hashMap159 = new HashMap();
        hashMap159.put("name", "recyclerSetCustomViewData");
        hashMap159.put("type", " ");
        hashMap159.put("code", "");
        hashMap159.put("color", "#4A6CD4");
        hashMap159.put("palette", "-1");
        hashMap159.put("spec", "%m.recyclerview setRecyclerCustomViewData %m.listMap");
        arrayList.add(0, hashMap159);
        HashMap hashMap160 = new HashMap();
        hashMap160.put("name", "recyclerSetLayoutManager");
        hashMap160.put("type", " ");
        hashMap160.put("code", "%s.setLayoutManager(new LinearLayoutManager(this));");
        hashMap160.put("color", "#4A6CD4");
        hashMap160.put("palette", "-1");
        hashMap160.put("spec", "%m.recyclerview setLayoutManager");
        arrayList.add(0, hashMap160);
        HashMap hashMap161 = new HashMap();
        hashMap161.put("name", "recyclerSetLayoutManagerHorizontal");
        hashMap161.put("type", " ");
        hashMap161.put("code", "%s.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL, false));");
        hashMap161.put("color", "#4A6CD4");
        hashMap161.put("palette", "-1");
        hashMap161.put("spec", "%m.recyclerview set Horizontal LayoutManager");
        arrayList.add(0, hashMap161);
        HashMap hashMap162 = new HashMap();
        hashMap162.put("name", "recyclerSetHasFixedSize");
        hashMap162.put("type", " ");
        hashMap162.put("code", "%s.setHasFixedSize(%s);");
        hashMap162.put("color", "#4A6CD4");
        hashMap162.put("palette", "-1");
        hashMap162.put("spec", "%m.recyclerview setHasFixedSize %b");
        arrayList.add(0, hashMap162);
        HashMap hashMap163 = new HashMap();
        hashMap163.put("name", "recyclerSmoothScrollToPosition");
        hashMap163.put("type", " ");
        hashMap163.put("code", "%s.smoothScrollToPosition((int)%s);");
        hashMap163.put("color", "#4A6CD4");
        hashMap163.put("palette", "-1");
        hashMap163.put("spec", "%m.recyclerview smoothScrollToPosition %d");
        arrayList.add(0, hashMap163);
        HashMap hashMap164 = new HashMap();
        hashMap164.put("name", "recyclerScrollToPositionWithOffset");
        hashMap164.put("type", " ");
        hashMap164.put("code", " ((LinearLayoutManager) %s.getLayoutManager()).scrollToPositionWithOffset((int)%s, (int)%s);");
        hashMap164.put("color", "#4A6CD4");
        hashMap164.put("palette", "-1");
        hashMap164.put("spec", "%m.recyclerview scrollToPosition %d offset %d ");
        arrayList.add(0, hashMap164);
        HashMap hashMap165 = new HashMap();
        hashMap165.put("name", "recyclerscrollparam");
        hashMap165.put("type", "d");
        hashMap165.put("code", "RecyclerView.%s");
        hashMap165.put("color", "#4A6CD4");
        hashMap165.put("palette", "-1");
        hashMap165.put("spec", "%m.recyclerscrollparam");
        arrayList.add(0, hashMap165);
        HashMap hashMap166 = new HashMap();
        hashMap166.put("name", "pagerscrollparam");
        hashMap166.put("type", "d");
        hashMap166.put("code", "ViewPager.%s");
        hashMap166.put("color", "#4A6CD4");
        hashMap166.put("palette", "-1");
        hashMap166.put("spec", "%m.pagerscrollparam");
        arrayList.add(0, hashMap166);
        HashMap hashMap167 = new HashMap();
        hashMap167.put("name", "pagerSetCustomViewData");
        hashMap167.put("type", " ");
        hashMap167.put("code", "");
        hashMap167.put("color", "#4A6CD4");
        hashMap167.put("palette", "-1");
        hashMap167.put("spec", "%m.viewpager setPagerCustomViewData %m.listMap");
        arrayList.add(0, hashMap167);
        HashMap hashMap168 = new HashMap();
        hashMap168.put("name", "pagerSetFragmentAdapter");
        hashMap168.put("type", " ");
        hashMap168.put("code", "%s.setAdapter(new MyFragmentAdapter(getApplicationContext(), getSupportFragmentManager(), %s));");
        hashMap168.put("color", "#4A6CD4");
        hashMap168.put("palette", "-1");
        hashMap168.put("spec", "%m.viewpager setFragmentAdapter TabCount %d");
        arrayList.add(0, hashMap168);
        HashMap hashMap169 = new HashMap();
        hashMap169.put("name", "pagerGetOffscreenPageLimit");
        hashMap169.put("type", "d");
        hashMap169.put("code", "%s.getOffscreenPageLimit()");
        hashMap169.put("color", "#4A6CD4");
        hashMap169.put("palette", "-1");
        hashMap169.put("spec", "%m.viewpager getOffscreenPageLimit");
        arrayList.add(0, hashMap169);
        HashMap hashMap170 = new HashMap();
        hashMap170.put("name", "pagerSetOffscreenPageLimit");
        hashMap170.put("type", " ");
        hashMap170.put("code", "%s.setOffscreenPageLimit((int)%s);");
        hashMap170.put("color", "#4A6CD4");
        hashMap170.put("palette", "-1");
        hashMap170.put("spec", "%m.viewpager setOffscreenPageLimit %d");
        arrayList.add(0, hashMap170);
        HashMap hashMap171 = new HashMap();
        hashMap171.put("name", "pagerGetCurrentItem");
        hashMap171.put("type", "d");
        hashMap171.put("code", "%s.getCurrentItem()");
        hashMap171.put("color", "#4A6CD4");
        hashMap171.put("palette", "-1");
        hashMap171.put("spec", "%m.viewpager getCurrentItem");
        arrayList.add(0, hashMap171);
        HashMap hashMap172 = new HashMap();
        hashMap172.put("name", "pagerSetCurrentItem");
        hashMap172.put("type", " ");
        hashMap172.put("code", "%s.setCurrentItem((int)%s);");
        hashMap172.put("color", "#4A6CD4");
        hashMap172.put("palette", "-1");
        hashMap172.put("spec", "%m.viewpager setCurrentItem %d");
        arrayList.add(0, hashMap172);
        HashMap hashMap173 = new HashMap();
        hashMap173.put("name", "onSwipeRefreshLayout");
        hashMap173.put("type", "c");
        hashMap173.put("code", "%s.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n@Override\r\npublic void onRefresh() {\r\n%s\r\n}\r\n});");
        hashMap173.put("color", "#4A6CD4");
        hashMap173.put("palette", "-1");
        hashMap173.put("spec", "When %m.swiperefreshlayout refreshed");
        arrayList.add(0, hashMap173);
        HashMap hashMap174 = new HashMap();
        hashMap174.put("name", "setRefreshing");
        hashMap174.put("type", " ");
        hashMap174.put("code", "%s.setRefreshing(%s);");
        hashMap174.put("color", "#4A6CD4");
        hashMap174.put("palette", "-1");
        hashMap174.put("spec", "%m.swiperefreshlayout setRefreshing %b");
        arrayList.add(0, hashMap174);
        HashMap hashMap175 = new HashMap();
        hashMap175.put("name", "viewOnLongClick");
        hashMap175.put("type", "c");
        hashMap175.put("code", "%s.setOnLongClickListener(new View.OnLongClickListener() {\r\n@Override\r\npublic boolean onLongClick(View _view) {\r\n%s\r\nreturn true;\r\n}\r\n});");
        hashMap175.put("color", "#4A6CD4");
        hashMap175.put("palette", "-1");
        hashMap175.put("spec", "When %m.view long clicked");
        arrayList.add(0, hashMap175);
        HashMap hashMap176 = new HashMap();
        hashMap176.put("name", "viewOnTouch");
        hashMap176.put("type", "c");
        hashMap176.put("code", "%s.setOnTouchListener(new View.OnTouchListener(){\r\n@Override\r\npublic boolean onTouch(View _view, MotionEvent _motionEvent){\r\n%s\r\nreturn true;\r\n}\r\n});");
        hashMap176.put("color", "#4A6CD4");
        hashMap176.put("palette", "-1");
        hashMap176.put("spec", "When %m.view touched");
        arrayList.add(0, hashMap176);
        HashMap hashMap177 = new HashMap();
        hashMap177.put("name", "checkboxOnChecked");
        hashMap177.put("type", "c");
        hashMap177.put("code", "%s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n@Override\r\npublic void onCheckedChanged(CompoundButton cb, boolean isChecked) {\r\n%s\r\n}});");
        hashMap177.put("color", "#4A6CD4");
        hashMap177.put("palette", "-1");
        hashMap177.put("spec", "When %m.checkbox checked");
        arrayList.add(0, hashMap177);
        HashMap hashMap178 = new HashMap();
        hashMap178.put("name", "checkboxIsChecked");
        hashMap178.put("type", "b");
        hashMap178.put("code", "isChecked");
        hashMap178.put("color", "#4A6CD4");
        hashMap178.put("palette", "-1");
        hashMap178.put("spec", "isChecked");
        arrayList.add(0, hashMap178);
        HashMap hashMap179 = new HashMap();
        hashMap179.put("name", "getBadgeCount");
        hashMap179.put("type", "d");
        hashMap179.put("code", "%s.getBadgeCount();");
        hashMap179.put("color", "#4A6CD4");
        hashMap179.put("palette", "-1");
        hashMap179.put("spec", "%m.badgeview getBadgeCount");
        arrayList.add(0, hashMap179);
        HashMap hashMap180 = new HashMap();
        hashMap180.put("name", "setBadgeNumber");
        hashMap180.put("type", " ");
        hashMap180.put("code", "%s.setBadgeCount(%s);");
        hashMap180.put("color", "#4A6CD4");
        hashMap180.put("palette", "-1");
        hashMap180.put("spec", "%m.badgeview setBadgeNumber %d");
        arrayList.add(0, hashMap180);
        HashMap hashMap181 = new HashMap();
        hashMap181.put("name", "setBadgeString");
        hashMap181.put("type", " ");
        hashMap181.put("code", "%s.setBadgeCount(%s);");
        hashMap181.put("color", "#4A6CD4");
        hashMap181.put("palette", "-1");
        hashMap181.put("spec", "%m.badgeview setBadgeString %s");
        arrayList.add(0, hashMap181);
        HashMap hashMap182 = new HashMap();
        hashMap182.put("name", "setBadgeBackground");
        hashMap182.put("type", " ");
        hashMap182.put("code", "%s.setBadgeBackground(%s);");
        hashMap182.put("color", "#4A6CD4");
        hashMap182.put("palette", "-1");
        hashMap182.put("spec", "%m.badgeview setBadgeBackground %m.color");
        arrayList.add(0, hashMap182);
        HashMap hashMap183 = new HashMap();
        hashMap183.put("name", "setBadgeTextColor");
        hashMap183.put("type", " ");
        hashMap183.put("code", "%s.setTextColor(%s);");
        hashMap183.put("color", "#4A6CD4");
        hashMap183.put("palette", "-1");
        hashMap183.put("spec", "%m.badgeview setBadgeTextColor %m.color");
        arrayList.add(0, hashMap183);
        HashMap hashMap184 = new HashMap();
        hashMap184.put("name", "setBadgeTextSize");
        hashMap184.put("type", " ");
        hashMap184.put("code", "%s.setTextSize((int)%s);");
        hashMap184.put("color", "#4A6CD4");
        hashMap184.put("palette", "-1");
        hashMap184.put("spec", "%m.badgeview setBadgeTextSize %d");
        arrayList.add(0, hashMap184);
        HashMap hashMap185 = new HashMap();
        hashMap185.put("name", "setCustomLetter");
        hashMap185.put("type", " ");
        hashMap185.put("code", "%s.setCustomLetter(new String []%s);");
        hashMap185.put("color", "#4A6CD4");
        hashMap185.put("palette", "-1");
        hashMap185.put("spec", "%m.sidebar setCustomLetter String [] %s.inputOnly");
        arrayList.add(0, hashMap185);
        HashMap hashMap186 = new HashMap();
        hashMap186.put("name", "setBubbleColor");
        hashMap186.put("type", " ");
        hashMap186.put("code", "%s.setBubbleColor(%s);");
        hashMap186.put("color", "#4A6CD4");
        hashMap186.put("palette", "-1");
        hashMap186.put("spec", "BubbleLayout %m.view setBubbleColor %m.color");
        arrayList.add(0, hashMap186);
        HashMap hashMap187 = new HashMap();
        hashMap187.put("name", "setBubbleStrokeColor");
        hashMap187.put("type", " ");
        hashMap187.put("code", "%s.setStrokeColor(%s);");
        hashMap187.put("color", "#4A6CD4");
        hashMap187.put("palette", "-1");
        hashMap187.put("spec", "BubbleLayout %m.view setStrokeColor %m.color");
        arrayList.add(0, hashMap187);
        HashMap hashMap188 = new HashMap();
        hashMap188.put("name", "setBubbleStrokeWidth");
        hashMap188.put("type", " ");
        hashMap188.put("code", "%s.setStrokeWidth((float)%s);");
        hashMap188.put("color", "#4A6CD4");
        hashMap188.put("palette", "-1");
        hashMap188.put("spec", "BubbleLayout %m.view setStrokeWidth %d");
        arrayList.add(0, hashMap188);
        HashMap hashMap189 = new HashMap();
        hashMap189.put("name", "setBubbleCornerRadius");
        hashMap189.put("type", " ");
        hashMap189.put("code", "%s.setCornersRadius((float)%s);");
        hashMap189.put("color", "#4A6CD4");
        hashMap189.put("palette", "-1");
        hashMap189.put("spec", "BubbleLayout %m.view setCornerRadius %d");
        arrayList.add(0, hashMap189);
        HashMap hashMap190 = new HashMap();
        hashMap190.put("name", "setBubbleArrowHeight");
        hashMap190.put("type", " ");
        hashMap190.put("code", "%s.setArrowHeight((float)%s);");
        hashMap190.put("color", "#4A6CD4");
        hashMap190.put("palette", "-1");
        hashMap190.put("spec", "BubbleLayout %m.view setArrowHeight %d");
        arrayList.add(0, hashMap190);
        HashMap hashMap191 = new HashMap();
        hashMap191.put("name", "setBubbleArrowWidth");
        hashMap191.put("type", " ");
        hashMap191.put("code", "%s.setArrowWidth((float)%s);");
        hashMap191.put("color", "#4A6CD4");
        hashMap191.put("palette", "-1");
        hashMap191.put("spec", "BubbleLayout %m.view setArrowWidth %d");
        arrayList.add(0, hashMap191);
        HashMap hashMap192 = new HashMap();
        hashMap192.put("name", "setBubbleArrowPosition");
        hashMap192.put("type", " ");
        hashMap192.put("code", "%s.setArrowPosition((float)%s);");
        hashMap192.put("color", "#4A6CD4");
        hashMap192.put("palette", "-1");
        hashMap192.put("spec", "BubbleLayout %m.view setArrowPosition %d");
        arrayList.add(0, hashMap192);
        HashMap hashMap193 = new HashMap();
        hashMap193.put("name", "patternToString");
        hashMap193.put("type", "s");
        hashMap193.put("code", "PatternLockUtils.patternToString(%s, %s)");
        hashMap193.put("color", "#4A6CD4");
        hashMap193.put("palette", "-1");
        hashMap193.put("spec", "%m.patternview getPattern from %m.listStr to String ");
        arrayList.add(0, hashMap193);
        HashMap hashMap194 = new HashMap();
        hashMap194.put("name", "patternToMD5");
        hashMap194.put("type", "s");
        hashMap194.put("code", "PatternLockUtils.patternToMD5(%s, %s)");
        hashMap194.put("color", "#4A6CD4");
        hashMap194.put("palette", "-1");
        hashMap194.put("spec", "%m.patternview getPattern from %m.listStr to MD5");
        arrayList.add(0, hashMap194);
        HashMap hashMap195 = new HashMap();
        hashMap195.put("name", "patternToSha1");
        hashMap195.put("type", "s");
        hashMap195.put("code", "PatternLockUtils.patternToSha1(%s, %s)");
        hashMap195.put("color", "#4A6CD4");
        hashMap195.put("palette", "-1");
        hashMap195.put("spec", "%m.patternview getPattern from %m.listStr to SHA1");
        arrayList.add(0, hashMap195);
        HashMap hashMap196 = new HashMap();
        hashMap196.put("name", "patternSetDotCount");
        hashMap196.put("type", " ");
        hashMap196.put("code", "%s.setDotCount((int)%s);");
        hashMap196.put("color", "#4A6CD4");
        hashMap196.put("palette", "-1");
        hashMap196.put("spec", "%m.patternview setDotCount %d ");
        arrayList.add(0, hashMap196);
        HashMap hashMap197 = new HashMap();
        hashMap197.put("name", "patternSetNormalStateColor");
        hashMap197.put("type", " ");
        hashMap197.put("code", "%s.setNormalStateColor(%s);");
        hashMap197.put("color", "#4A6CD4");
        hashMap197.put("palette", "-1");
        hashMap197.put("spec", "%m.patternview setNormalStateColor %m.color");
        arrayList.add(0, hashMap197);
        HashMap hashMap198 = new HashMap();
        hashMap198.put("name", "patternSetCorrectStateColor");
        hashMap198.put("type", " ");
        hashMap198.put("code", "%s.setCorrectStateColor(%s);");
        hashMap198.put("color", "#4A6CD4");
        hashMap198.put("palette", "-1");
        hashMap198.put("spec", "%m.patternview setCorrectStateColor %m.color");
        arrayList.add(0, hashMap198);
        HashMap hashMap199 = new HashMap();
        hashMap199.put("name", "patternSetWrongStateColor");
        hashMap199.put("type", " ");
        hashMap199.put("code", "%s.setWrongStateColor(%s);");
        hashMap199.put("color", "#4A6CD4");
        hashMap199.put("palette", "-1");
        hashMap199.put("spec", "%m.patternview setWrongStateColor %m.color");
        arrayList.add(0, hashMap199);
        HashMap hashMap200 = new HashMap();
        hashMap200.put("name", "patternSetViewMode");
        hashMap200.put("type", " ");
        hashMap200.put("code", "%s.setViewMode(PatternLockView.PatternViewMode.%s);");
        hashMap200.put("color", "#4A6CD4");
        hashMap200.put("palette", "-1");
        hashMap200.put("spec", "%m.patternview setViewMode %m.patternviewmode");
        arrayList.add(0, hashMap200);
        HashMap hashMap201 = new HashMap();
        hashMap201.put("name", "patternLockClear");
        hashMap201.put("type", " ");
        hashMap201.put("code", "%s.clearPattern();");
        hashMap201.put("color", "#4A6CD4");
        hashMap201.put("palette", "-1");
        hashMap201.put("spec", "%m.patternview clearPattern");
        arrayList.add(0, hashMap201);
        HashMap hashMap202 = new HashMap();
        hashMap202.put("name", "tilSetBoxBgColor");
        hashMap202.put("type", " ");
        hashMap202.put("code", "%s.setBoxBackgroundColor(%s);");
        hashMap202.put("color", "#4A6CD4");
        hashMap202.put("palette", "-1");
        hashMap202.put("spec", "%m.textinputlayout setBoxBackgroundColor %m.color");
        arrayList.add(0, hashMap202);
        HashMap hashMap203 = new HashMap();
        hashMap203.put("name", "tilSetBoxStrokeColor");
        hashMap203.put("type", " ");
        hashMap203.put("code", "%s.setBoxStrokeColor(%s);");
        hashMap203.put("color", "#4A6CD4");
        hashMap203.put("palette", "-1");
        hashMap203.put("spec", "%m.textinputlayout setBoxStrokeColor %m.color");
        arrayList.add(0, hashMap203);
        HashMap hashMap204 = new HashMap();
        hashMap204.put("name", "tilSetBoxBgMode");
        hashMap204.put("type", " ");
        hashMap204.put("code", "%s.setBoxBackgroundMode(TextInputLayout.BOX_BACKGROUND_%s);");
        hashMap204.put("color", "#4A6CD4");
        hashMap204.put("palette", "-1");
        hashMap204.put("spec", "%m.textinputlayout setBoxBackgroundMode %m.til_box_mode");
        arrayList.add(0, hashMap204);
        HashMap hashMap205 = new HashMap();
        hashMap205.put("name", "tilSetBoxCornerRadii");
        hashMap205.put("type", " ");
        hashMap205.put("code", "%s.setBoxCornerRadii((float)%s, (float)%s, (float)%s, (float)%s);");
        hashMap205.put("color", "#4A6CD4");
        hashMap205.put("palette", "-1");
        hashMap205.put("spec", "%m.textinputlayout setBoxCornerRadius TL %d TR %d BL %d BR %d ");
        arrayList.add(0, hashMap205);
        HashMap hashMap206 = new HashMap();
        hashMap206.put("name", "tilSetError");
        hashMap206.put("type", " ");
        hashMap206.put("code", "%s.setError(%s);");
        hashMap206.put("color", "#4A6CD4");
        hashMap206.put("palette", "-1");
        hashMap206.put("spec", "%m.textinputlayout setError %s ");
        arrayList.add(0, hashMap206);
        HashMap hashMap207 = new HashMap();
        hashMap207.put("name", "tilSetErrorEnabled");
        hashMap207.put("type", " ");
        hashMap207.put("code", "%s.setErrorEnabled(%s);");
        hashMap207.put("color", "#4A6CD4");
        hashMap207.put("palette", "-1");
        hashMap207.put("spec", "%m.textinputlayout setErrorEnabled %b ");
        arrayList.add(0, hashMap207);
        HashMap hashMap208 = new HashMap();
        hashMap208.put("name", "tilSetCounterEnabled");
        hashMap208.put("type", " ");
        hashMap208.put("code", "%s.setCounterEnabled(%s);");
        hashMap208.put("color", "#4A6CD4");
        hashMap208.put("palette", "-1");
        hashMap208.put("spec", "%m.textinputlayout setCounterEnabled %b ");
        arrayList.add(0, hashMap208);
        HashMap hashMap209 = new HashMap();
        hashMap209.put("name", "tilSetCounterMaxLength");
        hashMap209.put("type", " ");
        hashMap209.put("code", "%s.setCounterMaxLength(%s);");
        hashMap209.put("color", "#4A6CD4");
        hashMap209.put("palette", "-1");
        hashMap209.put("spec", "%m.textinputlayout setCounterMaxLength %d ");
        arrayList.add(0, hashMap209);
        HashMap hashMap210 = new HashMap();
        hashMap210.put("name", "tilGetCounterMaxLength");
        hashMap210.put("type", "d");
        hashMap210.put("code", "%s.getCounterMaxLength()");
        hashMap210.put("color", "#4A6CD4");
        hashMap210.put("palette", "-1");
        hashMap210.put("spec", "%m.textinputlayout getCounterMaxLength");
        arrayList.add(0, hashMap210);
        HashMap hashMap211 = new HashMap();
        hashMap211.put("name", "YTPVLifecycle");
        hashMap211.put("type", " ");
        hashMap211.put("code", "getLifecycle().addObserver(%1$s);");
        hashMap211.put("color", "#4A6CD4");
        hashMap211.put("palette", "-1");
        hashMap211.put("spec", "%m.youtubeview geLifecycle");
        arrayList.add(0, hashMap211);
        HashMap hashMap212 = new HashMap();
        hashMap212.put("name", "YTPVSetListener");
        hashMap212.put("type", "c");
        hashMap212.put("code", "%1$s.addYouTubePlayerListener(new AbstractYouTubePlayerListener() {\r\n  @Override\r\n  public void onReady(@NonNull YouTubePlayer youTubePlayer) {\r\n    String videoId = %2$s;\r\n    youTubePlayer.cueVideo(videoId, 0);\r\n    %3$s\r\n  }\r\n});");
        hashMap212.put("color", "#4A6CD4");
        hashMap212.put("palette", "-1");
        hashMap212.put("spec", "%m.youtubeview addYouTubePlayerListener VideoID %s");
        arrayList.add(0, hashMap212);
        HashMap hashMap213 = new HashMap();
        hashMap213.put("name", "launchApp");
        hashMap213.put("type", " ");
        hashMap213.put("code", "%s = getPackageManager().getLaunchIntentForPackage(%s);");
        hashMap213.put("color", "#2AA4E2");
        hashMap213.put("palette", "-1");
        hashMap213.put("spec", "%m.intent set app package %s");
        arrayList.add(0, hashMap213);
        HashMap hashMap214 = new HashMap();
        hashMap214.put("name", "changeStatebarColour");
        hashMap214.put("type", " ");
        hashMap214.put("code", "if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {\r\nWindow w =%s.this.getWindow();\r\nw.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\r\nw.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); w.setStatusBarColor(%s);\r\n}");
        hashMap214.put("color", "#2AA4E2");
        hashMap214.put("palette", "-1");
        hashMap214.put("spec", "%m.activity set statebar color %m.color");
        arrayList.add(0, hashMap214);
        HashMap hashMap215 = new HashMap();
        hashMap215.put("name", "Dialog SetIcon");
        hashMap215.put("type", " ");
        hashMap215.put("code", "%s.setIcon(R.drawable.%s);");
        hashMap215.put("color", "#2AA4E2");
        hashMap215.put("palette", "-1");
        hashMap215.put("spec", "%m.dialog setIcon %m.resource_bg");
        arrayList.add(0, hashMap215);
        HashMap hashMap216 = new HashMap();
        hashMap216.put("name", "ViewPagerNotifyOnDtatChange");
        hashMap216.put("type", " ");
        hashMap216.put("code", "((PagerAdapter)%s.getAdapter()).notifyDataSetChanged();");
        hashMap216.put("color", "#4A6CD4");
        hashMap216.put("palette", "-1");
        hashMap216.put("spec", "%m.viewpager notifyDataSetChanged");
        arrayList.add(0, hashMap216);
        HashMap hashMap217 = new HashMap();
        hashMap217.put("name", "returnMap");
        hashMap217.put("type", " ");
        hashMap217.put("typeName", "");
        hashMap217.put("code", "return %s;");
        hashMap217.put("color", "#e1a92a");
        hashMap217.put("palette", "-1");
        hashMap217.put("spec", "return %m.varMap");
        arrayList.add(0, hashMap217);
        HashMap hashMap218 = new HashMap();
        hashMap218.put("name", "returnListStr");
        hashMap218.put("type", " ");
        hashMap218.put("typeName", "");
        hashMap218.put("code", "return %s;");
        hashMap218.put("color", "#e1a92a");
        hashMap218.put("palette", "-1");
        hashMap218.put("spec", "return %m.listStr");
        arrayList.add(0, hashMap218);
        HashMap hashMap219 = new HashMap();
        hashMap219.put("name", "returnListMap");
        hashMap219.put("type", " ");
        hashMap219.put("typeName", "");
        hashMap219.put("code", "return %s;");
        hashMap219.put("color", "#e1a92a");
        hashMap219.put("palette", "-1");
        hashMap219.put("spec", "return %m.listMap");
        arrayList.add(0, hashMap219);
        HashMap hashMap220 = new HashMap();
        hashMap220.put("name", "returnView");
        hashMap220.put("type", " ");
        hashMap220.put("typeName", "");
        hashMap220.put("code", "return %s;");
        hashMap220.put("color", "#e1a92a");
        hashMap220.put("palette", "-1");
        hashMap220.put("spec", "return %m.view");
        arrayList.add(0, hashMap220);
        HashMap hashMap221 = new HashMap();
        hashMap221.put("name", "repeatKnownNum");
        hashMap221.put("type", "c");
        hashMap221.put("typeName", "");
        hashMap221.put("code", "for(int %2$s= 0; %2$s < (int)(%1$s); %2$s++) {\r\n%3$s\r\n}");
        hashMap221.put("color", "#e1a92a");
        hashMap221.put("palette", "-1");
        hashMap221.put("spec", "repeat %d : %s.inputOnly ++");
        arrayList.add(0, hashMap221);
        HashMap hashMap222 = new HashMap();
        hashMap222.put("name", "whileLoop");
        hashMap222.put("type", "c");
        hashMap222.put("typeName", "");
        hashMap222.put("code", "while(%s) {\r\n%s\r\n}");
        hashMap222.put("color", "#e1a92a");
        hashMap222.put("palette", "-1");
        hashMap222.put("spec", "while %b");
        arrayList.add(0, hashMap222);
        HashMap hashMap223 = new HashMap();
        hashMap223.put("name", "tryCatch");
        hashMap223.put("type", "e");
        hashMap223.put("typeName", "");
        hashMap223.put("code", "try {\r\n%s\r\n} catch(Exception e) {\r\n%s\r\n}");
        hashMap223.put("color", "#e1a92a");
        hashMap223.put("palette", "-1");
        hashMap223.put("spec", "try");
        hashMap223.put("spec2", "catch");
        arrayList.add(0, hashMap223);
        HashMap hashMap224 = new HashMap();
        hashMap224.put("name", "switchStr");
        hashMap224.put("type", "c");
        hashMap224.put("typeName", "");
        hashMap224.put("code", "switch(%s) {\r\n%s\r\n}");
        hashMap224.put("color", "#e1a92a");
        hashMap224.put("palette", "-1");
        hashMap224.put("spec", "switch %s");
        arrayList.add(0, hashMap224);
        HashMap hashMap225 = new HashMap();
        hashMap225.put("name", "switchNum");
        hashMap225.put("type", "c");
        hashMap225.put("typeName", "");
        hashMap225.put("code", "switch((int)%s) {\r\n%s\r\n}");
        hashMap225.put("color", "#e1a92a");
        hashMap225.put("palette", "-1");
        hashMap225.put("spec", "switch %d");
        arrayList.add(0, hashMap225);
        HashMap hashMap226 = new HashMap();
        hashMap226.put("name", "caseStr");
        hashMap226.put("type", "c");
        hashMap226.put("typeName", "");
        hashMap226.put("code", "case %s: {\r\n%s\r\nbreak;\r\n}");
        hashMap226.put("color", "#e1a92a");
        hashMap226.put("palette", "-1");
        hashMap226.put("spec", "case %s");
        arrayList.add(0, hashMap226);
        HashMap hashMap227 = new HashMap();
        hashMap227.put("name", "caseNum");
        hashMap227.put("type", "c");
        hashMap227.put("typeName", "");
        hashMap227.put("code", "case ((int)%s): {\r\n%s\r\nbreak;\r\n}");
        hashMap227.put("color", "#e1a92a");
        hashMap227.put("palette", "-1");
        hashMap227.put("spec", "case %d");
        arrayList.add(0, hashMap227);
        HashMap hashMap228 = new HashMap();
        hashMap228.put("name", "defaultSwitch");
        hashMap228.put("type", "c");
        hashMap228.put("typeName", "");
        hashMap228.put("code", "default: {\r\n%s\r\nbreak;\r\n}");
        hashMap228.put("color", "#e1a92a");
        hashMap228.put("palette", "-1");
        hashMap228.put("spec", "default");
        arrayList.add(0, hashMap228);
        HashMap hashMap229 = new HashMap();
        hashMap229.put("name", "returnString");
        hashMap229.put("type", " ");
        hashMap229.put("typeName", "");
        hashMap229.put("code", "return (%s);");
        hashMap229.put("color", "#e1a92a");
        hashMap229.put("palette", "-1");
        hashMap229.put("spec", "return %s");
        arrayList.add(0, hashMap229);
        HashMap hashMap230 = new HashMap();
        hashMap230.put("name", "returnNumber");
        hashMap230.put("type", " ");
        hashMap230.put("typeName", "");
        hashMap230.put("code", "return (%s);");
        hashMap230.put("color", "#e1a92a");
        hashMap230.put("palette", "-1");
        hashMap230.put("spec", "return %d");
        arrayList.add(0, hashMap230);
        HashMap hashMap231 = new HashMap();
        hashMap231.put("name", "returnBoolean");
        hashMap231.put("type", " ");
        hashMap231.put("typeName", "");
        hashMap231.put("code", "return (%s);");
        hashMap231.put("color", "#e1a92a");
        hashMap231.put("palette", "-1");
        hashMap231.put("spec", "return %b");
        arrayList.add(0, hashMap231);
        HashMap hashMap232 = new HashMap();
        hashMap232.put("name", "reverseList");
        hashMap232.put("type", " ");
        hashMap232.put("typeName", "");
        hashMap232.put("code", "Collections.reverse(%s);");
        hashMap232.put("color", "#cc5b22");
        hashMap232.put("palette", "-1");
        hashMap232.put("spec", "reverse %m.list");
        arrayList.add(0, hashMap232);
        HashMap hashMap233 = new HashMap();
        hashMap233.put("name", "shuffleList");
        hashMap233.put("type", " ");
        hashMap233.put("typeName", "");
        hashMap233.put("code", "Collections.shuffle(%s);");
        hashMap233.put("color", "#cc5b22");
        hashMap233.put("palette", "-1");
        hashMap233.put("spec", "shuffle %m.list");
        arrayList.add(0, hashMap233);
        HashMap hashMap234 = new HashMap();
        hashMap234.put("name", "sortList");
        hashMap234.put("type", " ");
        hashMap234.put("typeName", "");
        hashMap234.put("code", "Collections.sort(%s);");
        hashMap234.put("color", "#cc5b22");
        hashMap234.put("palette", "-1");
        hashMap234.put("spec", "sort %m.listStr");
        arrayList.add(0, hashMap234);
        HashMap hashMap235 = new HashMap();
        hashMap235.put("name", "sortListnum");
        hashMap235.put("type", " ");
        hashMap235.put("typeName", "");
        hashMap235.put("code", "Collections.sort(%s);");
        hashMap235.put("color", "#cc5b22");
        hashMap235.put("palette", "-1");
        hashMap235.put("spec", "sort %m.listInt");
        arrayList.add(0, hashMap235);
        HashMap hashMap236 = new HashMap();
        hashMap236.put("name", "swapInList");
        hashMap236.put("type", " ");
        hashMap236.put("typeName", "");
        hashMap236.put("code", "Collections.swap(%s, (int)(%s), (int)(%s));");
        hashMap236.put("color", "#cc5b22");
        hashMap236.put("palette", "-1");
        hashMap236.put("spec", "swap %m.list position %d with %d");
        arrayList.add(0, hashMap236);
        HashMap hashMap237 = new HashMap();
        hashMap237.put("name", "getMapAtPosListmap");
        hashMap237.put("type", "a");
        hashMap237.put("typeName", "");
        hashMap237.put("code", "%2$s.get((int)(%1$s))");
        hashMap237.put("color", "#cc5b22");
        hashMap237.put("palette", "-1");
        hashMap237.put("spec", "get map at %d of %m.listMap");
        arrayList.add(0, hashMap237);
        HashMap hashMap238 = new HashMap();
        hashMap238.put("name", "setMapAtPosListmap");
        hashMap238.put("type", " ");
        hashMap238.put("typeName", "");
        hashMap238.put("code", "%3$s.set((int)(%2$s), %1$s);");
        hashMap238.put("color", "#cc5b22");
        hashMap238.put("palette", "-1");
        hashMap238.put("spec", "set %m.varMap at %d of %m.listMap");
        arrayList.add(0, hashMap238);
        HashMap hashMap239 = new HashMap();
        hashMap239.put("name", "setAtPosListstr");
        hashMap239.put("type", " ");
        hashMap239.put("typeName", "");
        hashMap239.put("code", "%3$s.set((int)%2$s, %1$s);");
        hashMap239.put("color", "#cc5b22");
        hashMap239.put("palette", "-1");
        hashMap239.put("spec", "set %s at %d of %m.listStr");
        arrayList.add(0, hashMap239);
        HashMap hashMap240 = new HashMap();
        hashMap240.put("name", "setAtPosListnum");
        hashMap240.put("type", " ");
        hashMap240.put("typeName", "");
        hashMap240.put("code", "%3$s.set((int)%2$s, %1$s);");
        hashMap240.put("color", "#cc5b22");
        hashMap240.put("palette", "-1");
        hashMap240.put("spec", "set %d at %d of %m.listInt");
        arrayList.add(0, hashMap240);
        HashMap hashMap241 = new HashMap();
        hashMap241.put("name", "GsonListTojsonString");
        hashMap241.put("type", "s");
        hashMap241.put("typeName", "");
        hashMap241.put("code", "new Gson().toJson(%s)");
        hashMap241.put("color", "#5cb722");
        hashMap241.put("palette", "-1");
        hashMap241.put("spec", "%m.list to json string");
        arrayList.add(0, hashMap241);
        HashMap hashMap242 = new HashMap();
        hashMap242.put("name", "GsonStringToListString");
        hashMap242.put("type", " ");
        hashMap242.put("typeName", "");
        hashMap242.put("code", "%2$s = new Gson().fromJson(%1$s, new TypeToken<ArrayList<String>>(){}.getType());");
        hashMap242.put("color", "#5cb722");
        hashMap242.put("palette", "-1");
        hashMap242.put("spec", "Json %s to %m.listStr");
        arrayList.add(0, hashMap242);
        HashMap hashMap243 = new HashMap();
        hashMap243.put("name", "GsonStringToListNumber");
        hashMap243.put("type", " ");
        hashMap243.put("typeName", "");
        hashMap243.put("code", "%2$s = new Gson().fromJson(%1$s, new TypeToken<ArrayList<Double>>(){}.getType());");
        hashMap243.put("color", "#5cb722");
        hashMap243.put("palette", "-1");
        hashMap243.put("spec", "Json %s to %m.listInt");
        arrayList.add(0, hashMap243);
        HashMap hashMap244 = new HashMap();
        hashMap244.put("name", "hashmapGetNumber");
        hashMap244.put("type", "d");
        hashMap244.put("code", "(double)%s.get(%s)");
        hashMap244.put("palette", "-1");
        hashMap244.put("color", "#ee7d15");
        hashMap244.put("spec", "%m.varMap get number key %s");
        arrayList.add(0, hashMap244);
        HashMap hashMap245 = new HashMap();
        hashMap245.put("name", "hashmapPutNumber");
        hashMap245.put("type", " ");
        hashMap245.put("code", "%s.put(%s, (int)(%s));");
        hashMap245.put("palette", "-1");
        hashMap245.put("color", "#ee7d15");
        hashMap245.put("spec", "%m.varMap put key %s value int %d");
        arrayList.add(0, hashMap245);
        HashMap hashMap246 = new HashMap();
        hashMap246.put("name", "hashmapPutNumber2");
        hashMap246.put("type", " ");
        hashMap246.put("code", "%s.put(%s, (double)(%s));");
        hashMap246.put("palette", "-1");
        hashMap246.put("color", "#ee7d15");
        hashMap246.put("spec", "%m.varMap put key %s value double %d");
        arrayList.add(0, hashMap246);
        HashMap hashMap247 = new HashMap();
        hashMap247.put("name", "hashmapGetBoolean");
        hashMap247.put("type", "b");
        hashMap247.put("code", "(boolean)%s.get(%s)");
        hashMap247.put("palette", "-1");
        hashMap247.put("color", "#ee7d15");
        hashMap247.put("spec", "%m.varMap get boolean key %s");
        arrayList.add(0, hashMap247);
        HashMap hashMap248 = new HashMap();
        hashMap248.put("name", "hashmapPutBoolean");
        hashMap248.put("type", " ");
        hashMap248.put("code", "%s.put(%s, %s);");
        hashMap248.put("palette", "-1");
        hashMap248.put("color", "#ee7d15");
        hashMap248.put("spec", "%m.varMap put key %s value %b");
        arrayList.add(0, hashMap248);
        HashMap hashMap249 = new HashMap();
        hashMap249.put("name", "hashmapGetMap");
        hashMap249.put("type", "a");
        hashMap249.put("code", "(HashMap<String,Object>)%s.get(%s)");
        hashMap249.put("palette", "-1");
        hashMap249.put("color", "#ee7d15");
        hashMap249.put("spec", "%m.varMap get map key %s");
        arrayList.add(0, hashMap249);
        HashMap hashMap250 = new HashMap();
        hashMap250.put("name", "hashmapPutMap");
        hashMap250.put("type", " ");
        hashMap250.put("code", "%s.put(%s, %s);");
        hashMap250.put("palette", "-1");
        hashMap250.put("color", "#ee7d15");
        hashMap250.put("spec", "%m.varMap put key %s value %m.varMap");
        arrayList.add(0, hashMap250);
        HashMap hashMap251 = new HashMap();
        hashMap251.put("name", "hashmapListstr");
        hashMap251.put("type", "l");
        hashMap251.put("typeName", "List String");
        hashMap251.put("code", "(ArrayList<String>)%s.get(%s)");
        hashMap251.put("palette", "-1");
        hashMap251.put("color", "#ee7d15");
        hashMap251.put("spec", "%m.varMap get listString key %s");
        arrayList.add(0, hashMap251);
        HashMap hashMap252 = new HashMap();
        hashMap252.put("name", "hashmapPutListstr");
        hashMap252.put("type", " ");
        hashMap252.put("code", "%s.put(%s, %s);");
        hashMap252.put("palette", "-1");
        hashMap252.put("color", "#ee7d15");
        hashMap252.put("spec", "%m.varMap put key %s value %m.listStr");
        arrayList.add(0, hashMap252);
        HashMap hashMap253 = new HashMap();
        hashMap253.put("name", "hashmapGetListmap");
        hashMap253.put("type", "l");
        hashMap253.put("typeName", "List Map");
        hashMap253.put("code", "(ArrayList<HashMap<String,Object>>)%s.get(%s)");
        hashMap253.put("palette", "-1");
        hashMap253.put("color", "#ee7d15");
        hashMap253.put("spec", "%m.varMap get listMap key %s");
        arrayList.add(0, hashMap253);
        HashMap hashMap254 = new HashMap();
        hashMap254.put("name", "hashmapPutListmap");
        hashMap254.put("type", " ");
        hashMap254.put("color", "#ee7d15");
        hashMap254.put("code", "%s.put(%s, %s);");
        hashMap254.put("palette", "-1");
        hashMap254.put("spec", "%m.varMap put key %s value %m.listMap");
        arrayList.add(0, hashMap254);
        HashMap hashMap255 = new HashMap();
        hashMap255.put("name", "addSourceDirectly");
        hashMap255.put("type", " ");
        hashMap255.put("typeName", "");
        hashMap255.put("code", "%s");
        hashMap255.put("color", "#5cb722");
        hashMap255.put("palette", "-1");
        hashMap255.put("spec", "add source directly %s.inputOnly");
        arrayList.add(0, hashMap255);
        HashMap hashMap256 = new HashMap();
        hashMap256.put("name", "asdBoolean");
        hashMap256.put("type", "b");
        hashMap256.put("typeName", "");
        hashMap256.put("code", "%s");
        hashMap256.put("color", "#5cb722");
        hashMap256.put("palette", "-1");
        hashMap256.put("spec", "boolean %s.inputOnly");
        arrayList.add(0, hashMap256);
        HashMap hashMap257 = new HashMap();
        hashMap257.put("name", "asdNumber");
        hashMap257.put("type", "d");
        hashMap257.put("typeName", "");
        hashMap257.put("code", "%s");
        hashMap257.put("color", "#5cb722");
        hashMap257.put("palette", "-1");
        hashMap257.put("spec", "number %s.inputOnly");
        arrayList.add(0, hashMap257);
        HashMap hashMap258 = new HashMap();
        hashMap258.put("name", "asdString");
        hashMap258.put("type", "s");
        hashMap258.put("typeName", "");
        hashMap258.put("code", "%s");
        hashMap258.put("color", "#5cb722");
        hashMap258.put("palette", "-1");
        hashMap258.put("spec", "string %s.inputOnly");
        arrayList.add(0, hashMap258);
        HashMap hashMap259 = new HashMap();
        hashMap259.put("name", "asdMap");
        hashMap259.put("type", "a");
        hashMap259.put("typeName", "");
        hashMap259.put("code", "%s");
        hashMap259.put("color", "#5cb722");
        hashMap259.put("palette", "-1");
        hashMap259.put("spec", "map %s.inputOnly");
        arrayList.add(0, hashMap259);
        HashMap hashMap260 = new HashMap();
        hashMap260.put("name", "asdListstr");
        hashMap260.put("type", "l");
        hashMap260.put("typeName", "List String");
        hashMap260.put("code", "%s");
        hashMap260.put("color", "#5cb722");
        hashMap260.put("palette", "-1");
        hashMap260.put("spec", "list string %s.inputOnly");
        arrayList.add(0, hashMap260);
        HashMap hashMap261 = new HashMap();
        hashMap261.put("name", "asdListnum");
        hashMap261.put("type", "l");
        hashMap261.put("typeName", "List Number");
        hashMap261.put("code", "%s");
        hashMap261.put("color", "#5cb722");
        hashMap261.put("palette", "-1");
        hashMap261.put("spec", "ListNumber %s.inputOnly");
        arrayList.add(0, hashMap261);
        HashMap hashMap262 = new HashMap();
        hashMap262.put("name", "asdListmap");
        hashMap262.put("type", "l");
        hashMap262.put("typeName", "List Map");
        hashMap262.put("code", "%s");
        hashMap262.put("color", "#5cb722");
        hashMap262.put("palette", "-1");
        hashMap262.put("spec", "ListMap %s.inputOnly");
        arrayList.add(0, hashMap262);
        HashMap hashMap263 = new HashMap();
        hashMap263.put("name", "asdView");
        hashMap263.put("type", "v");
        hashMap263.put("typeName", "View");
        hashMap263.put("code", "%s");
        hashMap263.put("color", "#5cb722");
        hashMap263.put("palette", "-1");
        hashMap263.put("spec", "View %s.inputOnly");
        arrayList.add(0, hashMap263);
        HashMap hashMap264 = new HashMap();
        hashMap264.put("name", "asdTextView");
        hashMap264.put("type", "v");
        hashMap264.put("typeName", "TextView");
        hashMap264.put("code", "%s");
        hashMap264.put("color", "#5cb722");
        hashMap264.put("palette", "-1");
        hashMap264.put("spec", "TextView %s.inputOnly");
        arrayList.add(0, hashMap264);
        HashMap hashMap265 = new HashMap();
        hashMap265.put("name", "asdEditText");
        hashMap265.put("type", "v");
        hashMap265.put("typeName", "EditText");
        hashMap265.put("code", "%s");
        hashMap265.put("color", "#5cb722");
        hashMap265.put("palette", "-1");
        hashMap265.put("spec", "EditText %s.inputOnly");
        arrayList.add(0, hashMap265);
        HashMap hashMap266 = new HashMap();
        hashMap266.put("name", "asdButton");
        hashMap266.put("type", "v");
        hashMap266.put("typeName", "Button");
        hashMap266.put("code", "%s");
        hashMap266.put("color", "#5cb722");
        hashMap266.put("palette", "-1");
        hashMap266.put("spec", "Button %s.inputOnly");
        arrayList.add(0, hashMap266);
        HashMap hashMap267 = new HashMap();
        hashMap267.put("name", "asdImageView");
        hashMap267.put("type", "v");
        hashMap267.put("typeName", "ImageView");
        hashMap267.put("code", "%s");
        hashMap267.put("color", "#5cb722");
        hashMap267.put("palette", "-1");
        hashMap267.put("spec", "Imageview %s.inputOnly");
        arrayList.add(0, hashMap267);
        HashMap hashMap268 = new HashMap();
        hashMap268.put("name", "asdCheckbox");
        hashMap268.put("type", "v");
        hashMap268.put("typeName", "CheckBox");
        hashMap268.put("code", "%s");
        hashMap268.put("color", "#5cb722");
        hashMap268.put("palette", "-1");
        hashMap268.put("spec", "Checkbox %s.inputOnly");
        arrayList.add(0, hashMap268);
        HashMap hashMap269 = new HashMap();
        hashMap269.put("name", "asdListView");
        hashMap269.put("type", "v");
        hashMap269.put("typeName", "ListView");
        hashMap269.put("code", "%s");
        hashMap269.put("color", "#5cb722");
        hashMap269.put("palette", "-1");
        hashMap269.put("spec", "Listview %s.inputOnly");
        arrayList.add(0, hashMap269);
        HashMap hashMap270 = new HashMap();
        hashMap270.put("name", "asdSpinner");
        hashMap270.put("type", "v");
        hashMap270.put("typeName", "Spinner");
        hashMap270.put("code", "%s");
        hashMap270.put("color", "#5cb722");
        hashMap270.put("palette", "-1");
        hashMap270.put("spec", "Spinner %s.inputOnly");
        arrayList.add(0, hashMap270);
        HashMap hashMap271 = new HashMap();
        hashMap271.put("name", "TablayoutSourceCode");
        hashMap271.put("type", "v");
        hashMap271.put("typeName", "TabLayout");
        hashMap271.put("code", "%s");
        hashMap271.put("color", "#5cb722");
        hashMap271.put("palette", "-1");
        hashMap271.put("spec", "Tablayout %s.inputOnly");
        arrayList.add(0, hashMap271);
        HashMap hashMap272 = new HashMap();
        hashMap272.put("name", "webViewAsd");
        hashMap272.put("type", "v");
        hashMap272.put("typeName", "WebView");
        hashMap272.put("code", "%s");
        hashMap272.put("color", "#5cb722");
        hashMap272.put("palette", "-1");
        hashMap272.put("spec", "webView %s.inputOnly");
        arrayList.add(0, hashMap272);
        HashMap hashMap273 = new HashMap();
        hashMap273.put("name", "SeekBarAsd");
        hashMap273.put("type", "v");
        hashMap273.put("typeName", "SeekBar");
        hashMap273.put("code", "%s");
        hashMap273.put("color", "#5cb722");
        hashMap273.put("palette", "-1");
        hashMap273.put("spec", "SeekBar %s.inputOnly");
        arrayList.add(0, hashMap273);
        HashMap hashMap274 = new HashMap();
        hashMap274.put("name", "ProgressBarAsd");
        hashMap274.put("type", "v");
        hashMap274.put("typeName", "ProgressBar");
        hashMap274.put("code", "%s");
        hashMap274.put("color", "#5cb722");
        hashMap274.put("palette", "-1");
        hashMap274.put("spec", "ProgressBar %s.inputOnly");
        arrayList.add(0, hashMap274);
        HashMap hashMap275 = new HashMap();
        hashMap275.put("name", "MapViewAsd");
        hashMap275.put("type", "v");
        hashMap275.put("typeName", "MapView");
        hashMap275.put("code", "%s");
        hashMap275.put("color", "#5cb722");
        hashMap275.put("palette", "-1");
        hashMap275.put("spec", "MapView %s.inputOnly");
        arrayList.add(0, hashMap275);
        HashMap hashMap276 = new HashMap();
        hashMap276.put("name", "AdViewAsd");
        hashMap276.put("type", "v");
        hashMap276.put("typeName", "AdView");
        hashMap276.put("code", "%s");
        hashMap276.put("color", "#5cb722");
        hashMap276.put("palette", "-1");
        hashMap276.put("spec", "AdView %s.inputOnly");
        arrayList.add(0, hashMap276);
        HashMap hashMap277 = new HashMap();
        hashMap277.put("name", "RepeatKnownNumDescending");
        hashMap277.put("type", "c");
        hashMap277.put("typeName", "");
        hashMap277.put("code", "for(int %2$s= ((int)%1$s-1); %2$s > (int)(-1); %2$s--){\r\n%3$s\r\n}");
        hashMap277.put("color", "#e1a92a");
        hashMap277.put("palette", "-1");
        hashMap277.put("spec", "repeat %d : %s.inputOnly --");
        arrayList.add(0, hashMap277);
    }

    public static void builtInPallettes(ArrayList arrayList) {
    }

    public static void checkDir() {
        String concat = FileUtil.getExternalStorageDir().concat("/.sketchware/resources/block/My Block/block.json");
        if (!FileUtil.isExistFile(concat) || FileUtil.readFile(concat).equals("")) {
            FileUtil.writeFile(concat, "[]");
        }
    }

    public static boolean config(String str) {
        HashMap hashMap = new HashMap();
        if (FileUtil.isDirectory(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json"))) {
            FileUtil.deleteFile(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json"));
        }
        if (FileUtil.isExistFile(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json"))) {
            hashMap = (HashMap) new Gson().fromJson(FileUtil.readFile(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json")), new TypeToken<HashMap<String, Object>>() {
            }.getType());
            if (!hashMap.containsKey("built-in-blocks") || !hashMap.containsKey("always-show-blocks")) {
                hashMap.put("always-show-blocks", false);
                hashMap.put("built-in-blocks", false);
                FileUtil.writeFile(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json"), new Gson().toJson(hashMap));
            }
        } else {
            hashMap.put("always-show-blocks", false);
            hashMap.put("built-in-blocks", false);
            FileUtil.writeFile(FileUtil.getExternalStorageDir().concat("/.sketchware/data/settings.json"), new Gson().toJson(hashMap));
        }
        if (str.equals("A")) {
            return ((Boolean) hashMap.get("built-in-blocks")).booleanValue();
        }
        if (str.equals("B")) {
            return ((Boolean) hashMap.get("always-show-blocks")).booleanValue();
        }
        return false;
    }

    public static void primaryBlocksA(LogicEditorActivity logicEditorActivity, int i, int i2, int i3, int i4) {
        if (config("A")) {
            checkDir();
        }
        logicEditorActivity.a("Blocks", -11184811);
        if (config("B") || i > 0) {
            logicEditorActivity.a(" ", "setVarBoolean");
        }
        if (config("B") || i2 > 0) {
            logicEditorActivity.a(" ", "setVarInt");
            logicEditorActivity.a(" ", "increaseInt");
            logicEditorActivity.a(" ", "decreaseInt");
        }
        if (config("B") || i3 > 0) {
            logicEditorActivity.a(" ", "setVarString");
        }
        if (config("B") || i4 > 0) {
            logicEditorActivity.a(" ", "mapCreateNew");
            logicEditorActivity.a("Map sign values", -11184811);
            logicEditorActivity.a(" ", "mapPut");
        }
        if (config("A") && (config("B") || i4 > 0)) {
            logicEditorActivity.a(" ", "hashmapPutNumber");
            logicEditorActivity.a(" ", "hashmapPutNumber2");
            logicEditorActivity.a(" ", "hashmapPutBoolean");
            logicEditorActivity.a(" ", "hashmapPutMap");
            logicEditorActivity.a(" ", "hashmapPutListstr");
            logicEditorActivity.a(" ", "hashmapPutListmap");
        }
        if (config("B") || i4 > 0) {
            logicEditorActivity.a("Map get values", -11184811);
            logicEditorActivity.a("s", "mapGet");
        }
        if (config("A") && (config("B") || i4 > 0)) {
            logicEditorActivity.a("d", "hashmapGetNumber");
            logicEditorActivity.a("b", "hashmapGetBoolean");
            logicEditorActivity.a("a", "hashmapGetMap");
            logicEditorActivity.a("", "l", "List String", "hashmapListstr");
            logicEditorActivity.a("", "l", "List Map", "hashmapGetListmap");
        }
        if (config("B") || i4 > 0) {
            logicEditorActivity.a("Map general", -11184811);
            logicEditorActivity.a("b", "mapIsEmpty");
            logicEditorActivity.a("b", "mapContainKey");
            logicEditorActivity.a("b", "mapContainValue");
            logicEditorActivity.a("d", "mapSize");
            logicEditorActivity.a(" ", "mapRemoveKey");
            logicEditorActivity.a(" ", "mapClear");
            logicEditorActivity.a(" ", "mapGetAllKeys");
        }
    }

    public static void primaryBlocksB(LogicEditorActivity logicEditorActivity, int i, int i2, int i3, String str) {
        if (config("A")) {
            checkDir();
        }
        if (config("B") || i > 0) {
            logicEditorActivity.a("List number", -11184811);
            logicEditorActivity.a("b", "containListInt");
            logicEditorActivity.a("d", "getAtListInt");
            logicEditorActivity.a("d", "indexListInt");
            logicEditorActivity.a(" ", "addListInt");
            logicEditorActivity.a(" ", "insertListInt");
        }
        if (config("A") && (config("B") || i > 0)) {
            logicEditorActivity.a(" ", "setAtPosListnum");
        }
        if (config("A") && (config("B") || i > 0)) {
            logicEditorActivity.a(" ", "sortListnum");
        }
        if (config("B") || i2 > 0) {
            logicEditorActivity.a("List string", -11184811);
            logicEditorActivity.a("b", "containListStr");
            logicEditorActivity.a("d", "indexListStr");
            logicEditorActivity.a("s", "getAtListStr");
            logicEditorActivity.a(" ", "addListStr");
            logicEditorActivity.a(" ", "insertListStr");
        }
        if (config("A") && (config("B") || i2 > 0)) {
            logicEditorActivity.a(" ", "setAtPosListstr");
        }
        if (config("B") || i2 > 0) {
            logicEditorActivity.a(" ", "sortList");
        }
        if (config("B") || i3 > 0 || str.equals("onBindCustomView")) {
            logicEditorActivity.a("List map", -11184811);
            logicEditorActivity.a("b", "containListMap");
            logicEditorActivity.a("s", "getAtListMap");
            if (config("A")) {
                logicEditorActivity.a("a", "getMapAtPosListmap");
            }
            logicEditorActivity.a(" ", "addListMap");
            logicEditorActivity.a(" ", "insertListMap");
            logicEditorActivity.a(" ", "setListMap");
            logicEditorActivity.a(" ", "setMapAtPosListmap");
        }
        if (config("B") || i3 > 0) {
            logicEditorActivity.a(" ", "addMapToList");
            logicEditorActivity.a(" ", "insertMapToList");
            logicEditorActivity.a(" ", "getMapInList");
            logicEditorActivity.a(" ", "deleteMapFromListmap");
            logicEditorActivity.a(" ", "sortListmap");
        }
        logicEditorActivity.a("General", -11184811);
        if (config("B") || i3 > 0 || i2 > 0 || i > 0 || str.equals("onBindCustomView")) {
            logicEditorActivity.a("d", "lengthList");
            logicEditorActivity.a(" ", "deleteList");
            logicEditorActivity.a(" ", "clearList");
            if (config("A")) {
                logicEditorActivity.a(" ", "reverseList");
                logicEditorActivity.a(" ", "shuffleList");
                logicEditorActivity.a(" ", "swapInList");
            }
        }
    }

    public static void primaryBlocksC(LogicEditorActivity logicEditorActivity) {
        if (config("A")) {
            checkDir();
        }
        logicEditorActivity.a("c", "repeat");
        if (config("A")) {
            logicEditorActivity.a("c", "repeatKnownNum");
            logicEditorActivity.a("c", "RepeatKnownNumDescending");
        }
        logicEditorActivity.a("c", "forever");
        if (config("A")) {
            logicEditorActivity.a("c", "whileLoop");
        }
        logicEditorActivity.a("c", "if");
        logicEditorActivity.a("e", "ifElse");
        if (config("A")) {
            logicEditorActivity.a("c", "switchStr");
            logicEditorActivity.a("c", "caseStr");
            logicEditorActivity.a("c", "switchNum");
            logicEditorActivity.a("c", "caseNum");
            logicEditorActivity.a("c", "defaultSwitch");
            logicEditorActivity.a("e", "tryCatch");
            logicEditorActivity.a("s", "ternaryString");
            logicEditorActivity.a("d", "ternaryNumber");
            logicEditorActivity.a("f", "returnString");
            logicEditorActivity.a("f", "returnNumber");
            logicEditorActivity.a("f", "returnBoolean");
            logicEditorActivity.a("f", "returnMap");
            logicEditorActivity.a("f", "returnListStr");
            logicEditorActivity.a("f", "returnListMap");
            logicEditorActivity.a("f", "returnView");
            logicEditorActivity.a("f", "break");
        }
    }

    public static void primaryBlocksD(LogicEditorActivity logicEditorActivity) {
        if (config("A")) {
            checkDir();
        }
        logicEditorActivity.a("b", "true");
        logicEditorActivity.a("b", "false");
        logicEditorActivity.a("b", "<");
        logicEditorActivity.a("b", "=");
        logicEditorActivity.a("b", ">");
        logicEditorActivity.a("b", "&&");
        logicEditorActivity.a("b", "||");
        logicEditorActivity.a("b", "not");
        logicEditorActivity.a("d", "+");
        logicEditorActivity.a("d", "-");
        logicEditorActivity.a("d", "*");
        logicEditorActivity.a("d", "/");
        logicEditorActivity.a("d", "%");
        logicEditorActivity.a("d", "random");
        logicEditorActivity.a("d", "stringLength");
        logicEditorActivity.a("s", "stringJoin");
        logicEditorActivity.a("d", "stringIndex");
        logicEditorActivity.a("d", "stringLastIndex");
        logicEditorActivity.a("s", "stringSub");
        logicEditorActivity.a("b", "stringEquals");
        logicEditorActivity.a("b", "stringContains");
        if (config("A")) {
            logicEditorActivity.a("b", "stringMatches");
        }
        logicEditorActivity.a("s", "stringReplace");
        if (config("A")) {
            logicEditorActivity.a("s", "stringReplaceFirst");
            logicEditorActivity.a("s", "stringReplaceAll");
            logicEditorActivity.a("s", "reverse");
            logicEditorActivity.a("s", "html");
        }
        logicEditorActivity.a("s", "trim");
        logicEditorActivity.a("s", "toUpperCase");
        logicEditorActivity.a("s", "toLowerCase");
        logicEditorActivity.a("d", "toNumber");
        logicEditorActivity.a("d", "toHashCode");
        logicEditorActivity.a("s", "toString");
        logicEditorActivity.a("s", "toStringWithDecimal");
        logicEditorActivity.a("s", "toStringFormat");
        logicEditorActivity.a(" ", "strToMap");
        logicEditorActivity.a("s", "mapToStr");
        logicEditorActivity.a(" ", "strToListMap");
        logicEditorActivity.a("s", "listMapToStr");
        if (config("A")) {
            logicEditorActivity.a(" ", "GsonStringToListString");
            logicEditorActivity.a(" ", "GsonStringToListNumber");
            logicEditorActivity.a("s", "GsonListTojsonString");
            logicEditorActivity.a(" ", "stringSplitToList");
        }
        logicEditorActivity.a("add source directly", -11184811);
        logicEditorActivity.a(" ", "addSourceDirectly");
        logicEditorActivity.a("b", "asdBoolean");
        logicEditorActivity.a("d", "asdNumber");
        logicEditorActivity.a("s", "asdString");
    }

    public static void primaryBlocksE(LogicEditorActivity logicEditorActivity) {
        logicEditorActivity.a("d", "mathGetDip");
        logicEditorActivity.a("d", "mathGetDisplayWidth");
        logicEditorActivity.a("d", "mathGetDisplayHeight");
        logicEditorActivity.a("d", "mathPi");
        logicEditorActivity.a("d", "mathE");
        logicEditorActivity.a("d", "mathPow");
        logicEditorActivity.a("d", "mathMin");
        logicEditorActivity.a("d", "mathMax");
        logicEditorActivity.a("d", "mathSqrt");
        logicEditorActivity.a("d", "mathAbs");
        logicEditorActivity.a("d", "mathRound");
        logicEditorActivity.a("d", "mathCeil");
        logicEditorActivity.a("d", "mathFloor");
        logicEditorActivity.a("d", "mathSin");
        logicEditorActivity.a("d", "mathCos");
        logicEditorActivity.a("d", "mathTan");
        logicEditorActivity.a("d", "mathAsin");
        logicEditorActivity.a("d", "mathAcos");
        logicEditorActivity.a("d", "mathAtan");
        logicEditorActivity.a("d", "mathExp");
        logicEditorActivity.a("d", "mathLog");
        logicEditorActivity.a("d", "mathLog10");
        logicEditorActivity.a("d", "mathToRadian");
        logicEditorActivity.a("d", "mathToDegree");
    }

    public static void primaryBlocksF(LogicEditorActivity logicEditorActivity) {
        logicEditorActivity.a("s", "fileutilread");
        logicEditorActivity.a(" ", "fileutilwrite");
        logicEditorActivity.a(" ", "fileutilcopy");
        logicEditorActivity.a(" ", "fileutilmove");
        logicEditorActivity.a(" ", "fileutildelete");
        logicEditorActivity.a("b", "fileutilisexist");
        logicEditorActivity.a(" ", "fileutilmakedir");
        logicEditorActivity.a(" ", "fileutillistdir");
        logicEditorActivity.a("b", "fileutilisdir");
        logicEditorActivity.a("b", "fileutilisfile");
        logicEditorActivity.a("d", "fileutillength");
        logicEditorActivity.a("b", "fileutilStartsWith");
        logicEditorActivity.a("b", "fileutilEndsWith");
        logicEditorActivity.a("s", "fileutilGetLastSegmentPath");
        logicEditorActivity.a("s", "getExternalStorageDir");
        logicEditorActivity.a("s", "getPackageDataDir");
        logicEditorActivity.a("s", "getPublicDir");
        logicEditorActivity.a(" ", "resizeBitmapFileRetainRatio");
        logicEditorActivity.a(" ", "resizeBitmapFileToSquare");
        logicEditorActivity.a(" ", "resizeBitmapFileToCircle");
        logicEditorActivity.a(" ", "resizeBitmapFileWithRoundedBorder");
        logicEditorActivity.a(" ", "cropBitmapFileFromCenter");
        logicEditorActivity.a(" ", "rotateBitmapFile");
        logicEditorActivity.a(" ", "scaleBitmapFile");
        logicEditorActivity.a(" ", "skewBitmapFile");
        logicEditorActivity.a(" ", "setBitmapFileColorFilter");
        logicEditorActivity.a(" ", "setBitmapFileBrightness");
        logicEditorActivity.a(" ", "setBitmapFileContrast");
        logicEditorActivity.a("d", "getJpegRotate");
    }

    public static void primaryBlocksG() {
        checkDir();
    }

    public static void primaryBlocksH() {
        checkDir();
    }

    public static void primaryBlocksI() {
        checkDir();
    }
}
